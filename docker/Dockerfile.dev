FROM ubuntu:focal

#RUN apt-get update && \
#	DEBIAN_FRONTEND=noninteractive TZ=America/New_York apt-get -y install tzdata && \
#	apt-get install --yes liblmdb-dev libjpeg-turbo8-dev libeigen3-dev clang-12 python3 libpython3-dev cmake make libprotobuf-c-dev libprotobuf-c1 protobuf-c-compiler libopencv-imgcodecs-dev libopencv-imgproc-dev libopencv-core-dev libopencv-highgui-dev libfmt-dev libgdal-dev python3-distutils python3-setuptools libturbojpeg0-dev \
#	libxi-dev libxi6 mesa-common-dev libprotobuf-dev protobuf-compiler libwayland-dev wayland-protocols libwayland-client0 libwayland-egl1 libxcb-keysyms1-dev libxcb-keysyms1 \
#	git libx11-dev libx11-xcb-dev libxcb1-dev libxrandr-dev libxrandr2 libxinerama-dev libxinerama1 libxcursor-dev libxcursor1 && \
#	ln -s /usr/bin/python3 /usr/bin/python

# Dont use opencv
RUN apt-get update && \
	DEBIAN_FRONTEND=noninteractive TZ=America/New_York apt-get -y install tzdata && \
	apt-get install --yes liblmdb-dev libjpeg-turbo8-dev libeigen3-dev clang-12 python3 libpython3-dev cmake make libprotobuf-c-dev libprotobuf-c1 protobuf-c-compiler libfmt-dev libgdal-dev python3-distutils python3-setuptools libturbojpeg0-dev \
	libxi-dev libxi6 mesa-common-dev libprotobuf-dev protobuf-compiler libwayland-dev wayland-protocols libwayland-client0 libwayland-egl1 libxcb-keysyms1-dev libxcb-keysyms1 \
	git libx11-dev libx11-xcb-dev libxcb1-dev libxrandr-dev libxrandr2 libxinerama-dev libxinerama1 libxcursor-dev libxcursor1 && \
	ln -s /usr/bin/python3 /usr/bin/python

ENV CXX=clang++-12 CC=clang-12

# Pybind11 (system one does not work with clang12)
RUN cd /opt/ && git clone https://github.com/pybind/pybind11.git --single-branch --branch v2.9.2 --depth 1 && cd pybind11 && mkdir build && cd build && cmake .. -DPYBIND11_TEST=OFF && make -j4 && make install && cd /opt && rm -rf pybind11


# Lighter version (non entire sdk -- probably have issues compiling shaders in container)
#RUN apt-get install --yes libxi-dev libxi6 glslang-dev glslang-tools mesa-common-dev libprotobuf-dev protobuf-compiler
#RUN cd /opt && git clone https://github.com/KhronosGroup/Vulkan-Headers.git --single-branch --branch v1.3.219 --depth 1 && cd Vulkan-Headers && mkdir build && cd build && cmake .. && make -j5 && make install
#RUN cd /opt && git clone https://github.com/KhronosGroup/Vulkan-Loader.git --single-branch --branch v1.3.219 --depth 1 && cd Vulkan-Loader && mkdir build && cd build && cmake .. -DBUILD_WSI_WAYLAND_SUPPORT=OFF && make -j5 && make install

# Install entire vulkan sdk (allows compiling shaders in container -- takes a while...)
COPY ./docker/dist/vulkansdk-linux-x86_64-1.3.211.0.tar.gz /opt/
RUN cd /opt/ && tar zxf vulkansdk-linux-x86_64-1.3.211.0.tar.gz && mv 1.3.211.0 vulkanSdk && cd vulkanSdk && ./vulkansdk glslang loader layers tools vulkantools spirvtools spirvcross vulkan-extensionlayer vulkan-profiles && mv x86_64/* /opt/vulkanSdk && rm /opt/vulkanSdk/source -rf
ENV VULKAN_SDK=/opt/vulkanSdk

# Build newer gdal and with MrSid support
COPY ./docker/dist/MrSID_Raster_DSDK /opt/MrSID_Raster_DSDK
RUN cd /opt && apt-get install --yes libproj-dev && git clone https://github.com/OSGeo/gdal.git --single-branch --branch v3.4.0 --depth 1 && cd gdal/gdal && ./autogen.sh && ./configure --with-mrsid=/opt/MrSID_Raster_DSDK && make -j5 && make install

COPY . /opt/frast/
WORKDIR /opt/frast

# Build frast, install it, build frastVk, install it
RUN mkdir build && cd build && cmake .. && make -j4 && make install && \
	cd ../frastVk && mkdir build && cd build && cmake .. && make -j4 && make install
