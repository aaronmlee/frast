// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rocktree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rocktree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace geo_globetrotter_proto_rocktree {

namespace {

const ::google::protobuf::Descriptor* BulkMetadataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulkMetadataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CopyrightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CopyrightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextureDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextureDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulkMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulkMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMetadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeMetadata_Flags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NodeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Mesh_Layer_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Mesh_LayerMask_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Texture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Texture_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Texture_Format_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Texture_ViewDirection_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TextureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextureData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Copyrights_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Copyrights_reflection_ = NULL;
const ::google::protobuf::Descriptor* Copyright_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Copyright_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetoidMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetoidMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rocktree_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_rocktree_2eproto() {
  protobuf_AddDesc_rocktree_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rocktree.proto");
  GOOGLE_CHECK(file != NULL);
  BulkMetadataRequest_descriptor_ = file->message_type(0);
  static const int BulkMetadataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadataRequest, node_key_),
  };
  BulkMetadataRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BulkMetadataRequest_descriptor_,
      BulkMetadataRequest::default_instance_,
      BulkMetadataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadataRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(BulkMetadataRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadataRequest, _internal_metadata_),
      -1);
  NodeDataRequest_descriptor_ = file->message_type(1);
  static const int NodeDataRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDataRequest, node_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDataRequest, texture_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDataRequest, imagery_epoch_),
  };
  NodeDataRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeDataRequest_descriptor_,
      NodeDataRequest::default_instance_,
      NodeDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDataRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(NodeDataRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDataRequest, _internal_metadata_),
      -1);
  NodeKey_descriptor_ = file->message_type(2);
  static const int NodeKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeKey, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeKey, epoch_),
  };
  NodeKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeKey_descriptor_,
      NodeKey::default_instance_,
      NodeKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeKey, _has_bits_[0]),
      -1,
      -1,
      sizeof(NodeKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeKey, _internal_metadata_),
      -1);
  CopyrightRequest_descriptor_ = file->message_type(3);
  static const int CopyrightRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyrightRequest, epoch_),
  };
  CopyrightRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CopyrightRequest_descriptor_,
      CopyrightRequest::default_instance_,
      CopyrightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyrightRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CopyrightRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyrightRequest, _internal_metadata_),
      -1);
  TextureDataRequest_descriptor_ = file->message_type(4);
  static const int TextureDataRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureDataRequest, node_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureDataRequest, texture_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureDataRequest, view_direction_),
  };
  TextureDataRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TextureDataRequest_descriptor_,
      TextureDataRequest::default_instance_,
      TextureDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureDataRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TextureDataRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureDataRequest, _internal_metadata_),
      -1);
  BulkMetadata_descriptor_ = file->message_type(5);
  static const int BulkMetadata_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadata, node_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadata, head_node_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadata, head_node_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadata, meters_per_texel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadata, default_imagery_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadata, default_available_texture_formats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadata, default_available_view_dependent_textures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadata, default_available_view_dependent_texture_formats_),
  };
  BulkMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BulkMetadata_descriptor_,
      BulkMetadata::default_instance_,
      BulkMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadata, _has_bits_[0]),
      -1,
      -1,
      sizeof(BulkMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkMetadata, _internal_metadata_),
      -1);
  NodeMetadata_descriptor_ = file->message_type(6);
  static const int NodeMetadata_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, path_and_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, bulk_metadata_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, oriented_bounding_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, meters_per_texel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, processing_oriented_bounding_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, imagery_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, available_texture_formats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, available_view_dependent_textures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, available_view_dependent_texture_formats_),
  };
  NodeMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeMetadata_descriptor_,
      NodeMetadata::default_instance_,
      NodeMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, _has_bits_[0]),
      -1,
      -1,
      sizeof(NodeMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, _internal_metadata_),
      -1);
  NodeMetadata_Flags_descriptor_ = NodeMetadata_descriptor_->enum_type(0);
  NodeData_descriptor_ = file->message_type(7);
  static const int NodeData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, matrix_globe_from_mesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, meshes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, copyright_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, node_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, kml_bounding_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, water_mesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, overlay_surface_meshes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, for_normals_),
  };
  NodeData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeData_descriptor_,
      NodeData::default_instance_,
      NodeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, _has_bits_[0]),
      -1,
      -1,
      sizeof(NodeData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, _internal_metadata_),
      -1);
  Mesh_descriptor_ = file->message_type(8);
  static const int Mesh_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, vertex_alphas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, texture_coords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, octant_ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, layer_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, texture_coordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, uv_offset_and_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, layer_and_octant_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, normals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, normals_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, mesh_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, skirt_flags_),
  };
  Mesh_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mesh_descriptor_,
      Mesh::default_instance_,
      Mesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _has_bits_[0]),
      -1,
      -1,
      sizeof(Mesh),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _internal_metadata_),
      -1);
  Mesh_Layer_descriptor_ = Mesh_descriptor_->enum_type(0);
  Mesh_LayerMask_descriptor_ = Mesh_descriptor_->enum_type(1);
  Texture_descriptor_ = file->message_type(9);
  static const int Texture_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Texture, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Texture, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Texture, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Texture, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Texture, view_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Texture, mesh_id_),
  };
  Texture_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Texture_descriptor_,
      Texture::default_instance_,
      Texture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Texture, _has_bits_[0]),
      -1,
      -1,
      sizeof(Texture),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Texture, _internal_metadata_),
      -1);
  Texture_Format_descriptor_ = Texture_descriptor_->enum_type(0);
  Texture_ViewDirection_descriptor_ = Texture_descriptor_->enum_type(1);
  TextureData_descriptor_ = file->message_type(10);
  static const int TextureData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureData, node_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureData, textures_),
  };
  TextureData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TextureData_descriptor_,
      TextureData::default_instance_,
      TextureData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureData, _has_bits_[0]),
      -1,
      -1,
      sizeof(TextureData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureData, _internal_metadata_),
      -1);
  Copyrights_descriptor_ = file->message_type(11);
  static const int Copyrights_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyrights, copyrights_),
  };
  Copyrights_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Copyrights_descriptor_,
      Copyrights::default_instance_,
      Copyrights_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyrights, _has_bits_[0]),
      -1,
      -1,
      sizeof(Copyrights),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyrights, _internal_metadata_),
      -1);
  Copyright_descriptor_ = file->message_type(12);
  static const int Copyright_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyright, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyright, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyright, text_clean_),
  };
  Copyright_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Copyright_descriptor_,
      Copyright::default_instance_,
      Copyright_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyright, _has_bits_[0]),
      -1,
      -1,
      sizeof(Copyright),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyright, _internal_metadata_),
      -1);
  PlanetoidMetadata_descriptor_ = file->message_type(13);
  static const int PlanetoidMetadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetoidMetadata, root_node_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetoidMetadata, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetoidMetadata, min_terrain_altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetoidMetadata, max_terrain_altitude_),
  };
  PlanetoidMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlanetoidMetadata_descriptor_,
      PlanetoidMetadata::default_instance_,
      PlanetoidMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetoidMetadata, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlanetoidMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetoidMetadata, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rocktree_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BulkMetadataRequest_descriptor_, &BulkMetadataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeDataRequest_descriptor_, &NodeDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeKey_descriptor_, &NodeKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CopyrightRequest_descriptor_, &CopyrightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TextureDataRequest_descriptor_, &TextureDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BulkMetadata_descriptor_, &BulkMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeMetadata_descriptor_, &NodeMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeData_descriptor_, &NodeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mesh_descriptor_, &Mesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Texture_descriptor_, &Texture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TextureData_descriptor_, &TextureData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Copyrights_descriptor_, &Copyrights::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Copyright_descriptor_, &Copyright::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlanetoidMetadata_descriptor_, &PlanetoidMetadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rocktree_2eproto() {
  delete BulkMetadataRequest::default_instance_;
  delete BulkMetadataRequest_reflection_;
  delete NodeDataRequest::default_instance_;
  delete NodeDataRequest_reflection_;
  delete NodeKey::default_instance_;
  delete NodeKey_reflection_;
  delete CopyrightRequest::default_instance_;
  delete CopyrightRequest_reflection_;
  delete TextureDataRequest::default_instance_;
  delete TextureDataRequest_reflection_;
  delete BulkMetadata::default_instance_;
  delete BulkMetadata_reflection_;
  delete NodeMetadata::default_instance_;
  delete NodeMetadata_reflection_;
  delete NodeData::default_instance_;
  delete NodeData_reflection_;
  delete Mesh::default_instance_;
  delete Mesh_reflection_;
  delete Texture::default_instance_;
  delete Texture_reflection_;
  delete TextureData::default_instance_;
  delete TextureData_reflection_;
  delete Copyrights::default_instance_;
  delete Copyrights_reflection_;
  delete Copyright::default_instance_;
  delete Copyright_reflection_;
  delete PlanetoidMetadata::default_instance_;
  delete PlanetoidMetadata_reflection_;
}

void protobuf_AddDesc_rocktree_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_rocktree_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016rocktree.proto\022\037geo_globetrotter_proto"
    "_rocktree\"Q\n\023BulkMetadataRequest\022:\n\010node"
    "_key\030\001 \001(\0132(.geo_globetrotter_proto_rock"
    "tree.NodeKey\"\255\001\n\017NodeDataRequest\022:\n\010node"
    "_key\030\001 \001(\0132(.geo_globetrotter_proto_rock"
    "tree.NodeKey\022G\n\016texture_format\030\002 \001(\0162/.g"
    "eo_globetrotter_proto_rocktree.Texture.F"
    "ormat\022\025\n\rimagery_epoch\030\003 \001(\r\"&\n\007NodeKey\022"
    "\014\n\004path\030\001 \001(\t\022\r\n\005epoch\030\002 \001(\r\"!\n\020Copyrigh"
    "tRequest\022\r\n\005epoch\030\001 \001(\r\"\351\001\n\022TextureDataR"
    "equest\022:\n\010node_key\030\001 \001(\0132(.geo_globetrot"
    "ter_proto_rocktree.NodeKey\022G\n\016texture_fo"
    "rmat\030\002 \001(\0162/.geo_globetrotter_proto_rock"
    "tree.Texture.Format\022N\n\016view_direction\030\003 "
    "\001(\01626.geo_globetrotter_proto_rocktree.Te"
    "xture.ViewDirection\"\210\003\n\014BulkMetadata\022D\n\r"
    "node_metadata\030\001 \003(\0132-.geo_globetrotter_p"
    "roto_rocktree.NodeMetadata\022\?\n\rhead_node_"
    "key\030\002 \001(\0132(.geo_globetrotter_proto_rockt"
    "ree.NodeKey\022\034\n\020head_node_center\030\003 \003(\001B\002\020"
    "\001\022\034\n\020meters_per_texel\030\004 \003(\002B\002\020\001\022\035\n\025defau"
    "lt_imagery_epoch\030\005 \001(\r\022)\n!default_availa"
    "ble_texture_formats\030\006 \001(\r\0221\n)default_ava"
    "ilable_view_dependent_textures\030\007 \001(\r\0228\n0"
    "default_available_view_dependent_texture"
    "_formats\030\010 \001(\r\"\252\003\n\014NodeMetadata\022\026\n\016path_"
    "and_flags\030\001 \001(\r\022\r\n\005epoch\030\002 \001(\r\022\033\n\023bulk_m"
    "etadata_epoch\030\005 \001(\r\022\035\n\025oriented_bounding"
    "_box\030\003 \001(\014\022\030\n\020meters_per_texel\030\004 \001(\002\022,\n "
    "processing_oriented_bounding_box\030\006 \003(\001B\002"
    "\020\001\022\025\n\rimagery_epoch\030\007 \001(\r\022!\n\031available_t"
    "exture_formats\030\010 \001(\r\022)\n!available_view_d"
    "ependent_textures\030\t \001(\r\0220\n(available_vie"
    "w_dependent_texture_formats\030\n \001(\r\"X\n\005Fla"
    "gs\022\017\n\013RICH3D_LEAF\020\001\022\021\n\rRICH3D_NODATA\020\002\022\010"
    "\n\004LEAF\020\004\022\n\n\006NODATA\020\010\022\025\n\021USE_IMAGERY_EPOC"
    "H\020\020\"\355\002\n\010NodeData\022\"\n\026matrix_globe_from_me"
    "sh\030\001 \003(\001B\002\020\001\0225\n\006meshes\030\002 \003(\0132%.geo_globe"
    "trotter_proto_rocktree.Mesh\022\025\n\rcopyright"
    "_ids\030\003 \003(\r\022:\n\010node_key\030\004 \001(\0132(.geo_globe"
    "trotter_proto_rocktree.NodeKey\022\034\n\020kml_bo"
    "unding_box\030\005 \003(\001B\002\020\001\0229\n\nwater_mesh\030\006 \001(\013"
    "2%.geo_globetrotter_proto_rocktree.Mesh\022"
    "E\n\026overlay_surface_meshes\030\007 \003(\0132%.geo_gl"
    "obetrotter_proto_rocktree.Mesh\022\023\n\013for_no"
    "rmals\030\010 \001(\014\"\241\005\n\004Mesh\022\020\n\010vertices\030\001 \001(\014\022\025"
    "\n\rvertex_alphas\030\t \001(\014\022\026\n\016texture_coords\030"
    "\002 \001(\014\022\017\n\007indices\030\003 \001(\014\022\025\n\roctant_ranges\030"
    "\004 \001(\014\022\024\n\014layer_counts\030\005 \001(\014\0229\n\007texture\030\006"
    " \003(\0132(.geo_globetrotter_proto_rocktree.T"
    "exture\022\033\n\023texture_coordinates\030\007 \001(\014\022\037\n\023u"
    "v_offset_and_scale\030\n \003(\002B\002\020\001\022\037\n\027layer_an"
    "d_octant_counts\030\010 \001(\014\022\017\n\007normals\030\013 \001(\014\022\023"
    "\n\013normals_dev\030\020 \001(\014\022\017\n\007mesh_id\030\014 \001(\r\022\023\n\013"
    "skirt_flags\030\r \001(\014\"\326\001\n\005Layer\022\016\n\nOVERGROUN"
    "D\020\000\022\027\n\023TERRAIN_BELOW_WATER\020\001\022\027\n\023TERRAIN_"
    "ABOVE_WATER\020\002\022\022\n\016TERRAIN_HIDDEN\020\003\022\t\n\005WAT"
    "ER\020\004\022\020\n\014WATER_SKIRTS\020\005\022\031\n\025WATER_SKIRTS_I"
    "NVERTED\020\006\022\023\n\017OVERLAY_SURFACE\020\007\022\032\n\026OVERLA"
    "Y_SURFACE_SKIRTS\020\010\022\016\n\nNUM_LAYERS\020\t\"[\n\tLa"
    "yerMask\022\033\n\027TERRAIN_WITH_OVERGROUND\020\007\022\026\n\022"
    "TERRAIN_WITH_WATER\020\034\022\031\n\025TERRAIN_WITHOUT_"
    "WATER\020\016\"\201\003\n\007Texture\022\014\n\004data\030\001 \003(\014\022\?\n\006for"
    "mat\030\002 \001(\0162/.geo_globetrotter_proto_rockt"
    "ree.Texture.Format\022\022\n\005width\030\003 \001(\r:\003256\022\023"
    "\n\006height\030\004 \001(\r:\003256\022N\n\016view_direction\030\005 "
    "\001(\01626.geo_globetrotter_proto_rocktree.Te"
    "xture.ViewDirection\022\017\n\007mesh_id\030\006 \001(\r\"K\n\006"
    "Format\022\007\n\003JPG\020\001\022\010\n\004DXT1\020\002\022\010\n\004ETC1\020\003\022\n\n\006P"
    "VRTC2\020\004\022\n\n\006PVRTC4\020\005\022\014\n\010CRN_DXT1\020\006\"P\n\rVie"
    "wDirection\022\t\n\005NADIR\020\000\022\014\n\010NORTH_45\020\001\022\013\n\007E"
    "AST_45\020\002\022\014\n\010SOUTH_45\020\003\022\013\n\007WEST_45\020\004\"\205\001\n\013"
    "TextureData\022:\n\010node_key\030\001 \001(\0132(.geo_glob"
    "etrotter_proto_rocktree.NodeKey\022:\n\010textu"
    "res\030\002 \003(\0132(.geo_globetrotter_proto_rockt"
    "ree.Texture\"L\n\nCopyrights\022>\n\ncopyrights\030"
    "\001 \003(\0132*.geo_globetrotter_proto_rocktree."
    "Copyright\"9\n\tCopyright\022\n\n\002id\030\001 \001(\r\022\014\n\004te"
    "xt\030\002 \001(\t\022\022\n\ntext_clean\030\003 \001(\t\"\252\001\n\021Planeto"
    "idMetadata\022I\n\022root_node_metadata\030\001 \001(\0132-"
    ".geo_globetrotter_proto_rocktree.NodeMet"
    "adata\022\016\n\006radius\030\002 \001(\002\022\034\n\024min_terrain_alt"
    "itude\030\003 \001(\002\022\034\n\024max_terrain_altitude\030\004 \001("
    "\002", 3321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rocktree.proto", &protobuf_RegisterTypes);
  BulkMetadataRequest::default_instance_ = new BulkMetadataRequest();
  NodeDataRequest::default_instance_ = new NodeDataRequest();
  NodeKey::default_instance_ = new NodeKey();
  CopyrightRequest::default_instance_ = new CopyrightRequest();
  TextureDataRequest::default_instance_ = new TextureDataRequest();
  BulkMetadata::default_instance_ = new BulkMetadata();
  NodeMetadata::default_instance_ = new NodeMetadata();
  NodeData::default_instance_ = new NodeData();
  Mesh::default_instance_ = new Mesh();
  Texture::default_instance_ = new Texture();
  TextureData::default_instance_ = new TextureData();
  Copyrights::default_instance_ = new Copyrights();
  Copyright::default_instance_ = new Copyright();
  PlanetoidMetadata::default_instance_ = new PlanetoidMetadata();
  BulkMetadataRequest::default_instance_->InitAsDefaultInstance();
  NodeDataRequest::default_instance_->InitAsDefaultInstance();
  NodeKey::default_instance_->InitAsDefaultInstance();
  CopyrightRequest::default_instance_->InitAsDefaultInstance();
  TextureDataRequest::default_instance_->InitAsDefaultInstance();
  BulkMetadata::default_instance_->InitAsDefaultInstance();
  NodeMetadata::default_instance_->InitAsDefaultInstance();
  NodeData::default_instance_->InitAsDefaultInstance();
  Mesh::default_instance_->InitAsDefaultInstance();
  Texture::default_instance_->InitAsDefaultInstance();
  TextureData::default_instance_->InitAsDefaultInstance();
  Copyrights::default_instance_->InitAsDefaultInstance();
  Copyright::default_instance_->InitAsDefaultInstance();
  PlanetoidMetadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rocktree_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rocktree_2eproto {
  StaticDescriptorInitializer_rocktree_2eproto() {
    protobuf_AddDesc_rocktree_2eproto();
  }
} static_descriptor_initializer_rocktree_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulkMetadataRequest::kNodeKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulkMetadataRequest::BulkMetadataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
}

void BulkMetadataRequest::InitAsDefaultInstance() {
  node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(&::geo_globetrotter_proto_rocktree::NodeKey::default_instance());
}

BulkMetadataRequest::BulkMetadataRequest(const BulkMetadataRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
}

void BulkMetadataRequest::SharedCtor() {
  _cached_size_ = 0;
  node_key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulkMetadataRequest::~BulkMetadataRequest() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  SharedDtor();
}

void BulkMetadataRequest::SharedDtor() {
  if (this != default_instance_) {
    delete node_key_;
  }
}

void BulkMetadataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulkMetadataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulkMetadataRequest_descriptor_;
}

const BulkMetadataRequest& BulkMetadataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

BulkMetadataRequest* BulkMetadataRequest::default_instance_ = NULL;

BulkMetadataRequest* BulkMetadataRequest::New(::google::protobuf::Arena* arena) const {
  BulkMetadataRequest* n = new BulkMetadataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BulkMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  if (has_node_key()) {
    if (node_key_ != NULL) node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BulkMetadataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  return false;
#undef DO_
}

void BulkMetadataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (has_node_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_key_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
}

::google::protobuf::uint8* BulkMetadataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (has_node_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_key_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  return target;
}

int BulkMetadataRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  int total_size = 0;

  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (has_node_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_key_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulkMetadataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BulkMetadataRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BulkMetadataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
    MergeFrom(*source);
  }
}

void BulkMetadataRequest::MergeFrom(const BulkMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_key()) {
      mutable_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.node_key());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BulkMetadataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkMetadataRequest::CopyFrom(const BulkMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkMetadataRequest::IsInitialized() const {

  return true;
}

void BulkMetadataRequest::Swap(BulkMetadataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulkMetadataRequest::InternalSwap(BulkMetadataRequest* other) {
  std::swap(node_key_, other->node_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BulkMetadataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulkMetadataRequest_descriptor_;
  metadata.reflection = BulkMetadataRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BulkMetadataRequest

// optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
bool BulkMetadataRequest::has_node_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BulkMetadataRequest::set_has_node_key() {
  _has_bits_[0] |= 0x00000001u;
}
void BulkMetadataRequest::clear_has_node_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void BulkMetadataRequest::clear_node_key() {
  if (node_key_ != NULL) node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
  clear_has_node_key();
}
const ::geo_globetrotter_proto_rocktree::NodeKey& BulkMetadataRequest::node_key() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.BulkMetadataRequest.node_key)
  return node_key_ != NULL ? *node_key_ : *default_instance_->node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* BulkMetadataRequest::mutable_node_key() {
  set_has_node_key();
  if (node_key_ == NULL) {
    node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey;
  }
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.BulkMetadataRequest.node_key)
  return node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* BulkMetadataRequest::release_node_key() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.BulkMetadataRequest.node_key)
  clear_has_node_key();
  ::geo_globetrotter_proto_rocktree::NodeKey* temp = node_key_;
  node_key_ = NULL;
  return temp;
}
void BulkMetadataRequest::set_allocated_node_key(::geo_globetrotter_proto_rocktree::NodeKey* node_key) {
  delete node_key_;
  node_key_ = node_key;
  if (node_key) {
    set_has_node_key();
  } else {
    clear_has_node_key();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.BulkMetadataRequest.node_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeDataRequest::kNodeKeyFieldNumber;
const int NodeDataRequest::kTextureFormatFieldNumber;
const int NodeDataRequest::kImageryEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeDataRequest::NodeDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.NodeDataRequest)
}

void NodeDataRequest::InitAsDefaultInstance() {
  node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(&::geo_globetrotter_proto_rocktree::NodeKey::default_instance());
}

NodeDataRequest::NodeDataRequest(const NodeDataRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.NodeDataRequest)
}

void NodeDataRequest::SharedCtor() {
  _cached_size_ = 0;
  node_key_ = NULL;
  texture_format_ = 1;
  imagery_epoch_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeDataRequest::~NodeDataRequest() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.NodeDataRequest)
  SharedDtor();
}

void NodeDataRequest::SharedDtor() {
  if (this != default_instance_) {
    delete node_key_;
  }
}

void NodeDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeDataRequest_descriptor_;
}

const NodeDataRequest& NodeDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

NodeDataRequest* NodeDataRequest::default_instance_ = NULL;

NodeDataRequest* NodeDataRequest::New(::google::protobuf::Arena* arena) const {
  NodeDataRequest* n = new NodeDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_node_key()) {
      if (node_key_ != NULL) node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
    }
    texture_format_ = 1;
    imagery_epoch_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_texture_format;
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
      case 2: {
        if (tag == 16) {
         parse_texture_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(value)) {
            set_texture_format(static_cast< ::geo_globetrotter_proto_rocktree::Texture_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_imagery_epoch;
        break;
      }

      // optional uint32 imagery_epoch = 3;
      case 3: {
        if (tag == 24) {
         parse_imagery_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagery_epoch_)));
          set_has_imagery_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.NodeDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.NodeDataRequest)
  return false;
#undef DO_
}

void NodeDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (has_node_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_key_, output);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
  if (has_texture_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->texture_format(), output);
  }

  // optional uint32 imagery_epoch = 3;
  if (has_imagery_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->imagery_epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.NodeDataRequest)
}

::google::protobuf::uint8* NodeDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (has_node_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_key_, false, target);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
  if (has_texture_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->texture_format(), target);
  }

  // optional uint32 imagery_epoch = 3;
  if (has_imagery_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->imagery_epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.NodeDataRequest)
  return target;
}

int NodeDataRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
    if (has_node_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_key_);
    }

    // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
    if (has_texture_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->texture_format());
    }

    // optional uint32 imagery_epoch = 3;
    if (has_imagery_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagery_epoch());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeDataRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.NodeDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.NodeDataRequest)
    MergeFrom(*source);
  }
}

void NodeDataRequest::MergeFrom(const NodeDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_key()) {
      mutable_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.node_key());
    }
    if (from.has_texture_format()) {
      set_texture_format(from.texture_format());
    }
    if (from.has_imagery_epoch()) {
      set_imagery_epoch(from.imagery_epoch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NodeDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDataRequest::CopyFrom(const NodeDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDataRequest::IsInitialized() const {

  return true;
}

void NodeDataRequest::Swap(NodeDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeDataRequest::InternalSwap(NodeDataRequest* other) {
  std::swap(node_key_, other->node_key_);
  std::swap(texture_format_, other->texture_format_);
  std::swap(imagery_epoch_, other->imagery_epoch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeDataRequest_descriptor_;
  metadata.reflection = NodeDataRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeDataRequest

// optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
bool NodeDataRequest::has_node_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeDataRequest::set_has_node_key() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeDataRequest::clear_has_node_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeDataRequest::clear_node_key() {
  if (node_key_ != NULL) node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
  clear_has_node_key();
}
const ::geo_globetrotter_proto_rocktree::NodeKey& NodeDataRequest::node_key() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeDataRequest.node_key)
  return node_key_ != NULL ? *node_key_ : *default_instance_->node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* NodeDataRequest::mutable_node_key() {
  set_has_node_key();
  if (node_key_ == NULL) {
    node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey;
  }
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.NodeDataRequest.node_key)
  return node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* NodeDataRequest::release_node_key() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.NodeDataRequest.node_key)
  clear_has_node_key();
  ::geo_globetrotter_proto_rocktree::NodeKey* temp = node_key_;
  node_key_ = NULL;
  return temp;
}
void NodeDataRequest::set_allocated_node_key(::geo_globetrotter_proto_rocktree::NodeKey* node_key) {
  delete node_key_;
  node_key_ = node_key;
  if (node_key) {
    set_has_node_key();
  } else {
    clear_has_node_key();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.NodeDataRequest.node_key)
}

// optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
bool NodeDataRequest::has_texture_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeDataRequest::set_has_texture_format() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeDataRequest::clear_has_texture_format() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeDataRequest::clear_texture_format() {
  texture_format_ = 1;
  clear_has_texture_format();
}
 ::geo_globetrotter_proto_rocktree::Texture_Format NodeDataRequest::texture_format() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeDataRequest.texture_format)
  return static_cast< ::geo_globetrotter_proto_rocktree::Texture_Format >(texture_format_);
}
 void NodeDataRequest::set_texture_format(::geo_globetrotter_proto_rocktree::Texture_Format value) {
  assert(::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(value));
  set_has_texture_format();
  texture_format_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeDataRequest.texture_format)
}

// optional uint32 imagery_epoch = 3;
bool NodeDataRequest::has_imagery_epoch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NodeDataRequest::set_has_imagery_epoch() {
  _has_bits_[0] |= 0x00000004u;
}
void NodeDataRequest::clear_has_imagery_epoch() {
  _has_bits_[0] &= ~0x00000004u;
}
void NodeDataRequest::clear_imagery_epoch() {
  imagery_epoch_ = 0u;
  clear_has_imagery_epoch();
}
 ::google::protobuf::uint32 NodeDataRequest::imagery_epoch() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeDataRequest.imagery_epoch)
  return imagery_epoch_;
}
 void NodeDataRequest::set_imagery_epoch(::google::protobuf::uint32 value) {
  set_has_imagery_epoch();
  imagery_epoch_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeDataRequest.imagery_epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeKey::kPathFieldNumber;
const int NodeKey::kEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeKey::NodeKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.NodeKey)
}

void NodeKey::InitAsDefaultInstance() {
}

NodeKey::NodeKey(const NodeKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.NodeKey)
}

void NodeKey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epoch_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeKey::~NodeKey() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.NodeKey)
  SharedDtor();
}

void NodeKey::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NodeKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeKey_descriptor_;
}

const NodeKey& NodeKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

NodeKey* NodeKey::default_instance_ = NULL;

NodeKey* NodeKey::New(::google::protobuf::Arena* arena) const {
  NodeKey* n = new NodeKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeKey::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.NodeKey)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    epoch_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.NodeKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geo_globetrotter_proto_rocktree.NodeKey.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_epoch;
        break;
      }

      // optional uint32 epoch = 2;
      case 2: {
        if (tag == 16) {
         parse_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.NodeKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.NodeKey)
  return false;
#undef DO_
}

void NodeKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.NodeKey)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.NodeKey.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional uint32 epoch = 2;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.NodeKey)
}

::google::protobuf::uint8* NodeKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.NodeKey)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.NodeKey.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional uint32 epoch = 2;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.NodeKey)
  return target;
}

int NodeKey::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.NodeKey)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional uint32 epoch = 2;
    if (has_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epoch());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.NodeKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeKey* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.NodeKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.NodeKey)
    MergeFrom(*source);
  }
}

void NodeKey::MergeFrom(const NodeKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.NodeKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NodeKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.NodeKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeKey::CopyFrom(const NodeKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.NodeKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeKey::IsInitialized() const {

  return true;
}

void NodeKey::Swap(NodeKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeKey::InternalSwap(NodeKey* other) {
  path_.Swap(&other->path_);
  std::swap(epoch_, other->epoch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeKey_descriptor_;
  metadata.reflection = NodeKey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeKey

// optional string path = 1;
bool NodeKey::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeKey::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeKey::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeKey::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& NodeKey::path() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeKey.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeKey::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeKey.path)
}
 void NodeKey::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.NodeKey.path)
}
 void NodeKey::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.NodeKey.path)
}
 ::std::string* NodeKey::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.NodeKey.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NodeKey::release_path() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.NodeKey.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeKey::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.NodeKey.path)
}

// optional uint32 epoch = 2;
bool NodeKey::has_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeKey::set_has_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeKey::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeKey::clear_epoch() {
  epoch_ = 0u;
  clear_has_epoch();
}
 ::google::protobuf::uint32 NodeKey::epoch() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeKey.epoch)
  return epoch_;
}
 void NodeKey::set_epoch(::google::protobuf::uint32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeKey.epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CopyrightRequest::kEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CopyrightRequest::CopyrightRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.CopyrightRequest)
}

void CopyrightRequest::InitAsDefaultInstance() {
}

CopyrightRequest::CopyrightRequest(const CopyrightRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.CopyrightRequest)
}

void CopyrightRequest::SharedCtor() {
  _cached_size_ = 0;
  epoch_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CopyrightRequest::~CopyrightRequest() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.CopyrightRequest)
  SharedDtor();
}

void CopyrightRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CopyrightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CopyrightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CopyrightRequest_descriptor_;
}

const CopyrightRequest& CopyrightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

CopyrightRequest* CopyrightRequest::default_instance_ = NULL;

CopyrightRequest* CopyrightRequest::New(::google::protobuf::Arena* arena) const {
  CopyrightRequest* n = new CopyrightRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CopyrightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  epoch_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CopyrightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 epoch = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.CopyrightRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.CopyrightRequest)
  return false;
#undef DO_
}

void CopyrightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  // optional uint32 epoch = 1;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.CopyrightRequest)
}

::google::protobuf::uint8* CopyrightRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  // optional uint32 epoch = 1;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.CopyrightRequest)
  return target;
}

int CopyrightRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  int total_size = 0;

  // optional uint32 epoch = 1;
  if (has_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->epoch());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CopyrightRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CopyrightRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CopyrightRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.CopyrightRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.CopyrightRequest)
    MergeFrom(*source);
  }
}

void CopyrightRequest::MergeFrom(const CopyrightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CopyrightRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyrightRequest::CopyFrom(const CopyrightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyrightRequest::IsInitialized() const {

  return true;
}

void CopyrightRequest::Swap(CopyrightRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CopyrightRequest::InternalSwap(CopyrightRequest* other) {
  std::swap(epoch_, other->epoch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CopyrightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CopyrightRequest_descriptor_;
  metadata.reflection = CopyrightRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CopyrightRequest

// optional uint32 epoch = 1;
bool CopyrightRequest::has_epoch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CopyrightRequest::set_has_epoch() {
  _has_bits_[0] |= 0x00000001u;
}
void CopyrightRequest::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000001u;
}
void CopyrightRequest::clear_epoch() {
  epoch_ = 0u;
  clear_has_epoch();
}
 ::google::protobuf::uint32 CopyrightRequest::epoch() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.CopyrightRequest.epoch)
  return epoch_;
}
 void CopyrightRequest::set_epoch(::google::protobuf::uint32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.CopyrightRequest.epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextureDataRequest::kNodeKeyFieldNumber;
const int TextureDataRequest::kTextureFormatFieldNumber;
const int TextureDataRequest::kViewDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextureDataRequest::TextureDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.TextureDataRequest)
}

void TextureDataRequest::InitAsDefaultInstance() {
  node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(&::geo_globetrotter_proto_rocktree::NodeKey::default_instance());
}

TextureDataRequest::TextureDataRequest(const TextureDataRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.TextureDataRequest)
}

void TextureDataRequest::SharedCtor() {
  _cached_size_ = 0;
  node_key_ = NULL;
  texture_format_ = 1;
  view_direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextureDataRequest::~TextureDataRequest() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.TextureDataRequest)
  SharedDtor();
}

void TextureDataRequest::SharedDtor() {
  if (this != default_instance_) {
    delete node_key_;
  }
}

void TextureDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextureDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextureDataRequest_descriptor_;
}

const TextureDataRequest& TextureDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

TextureDataRequest* TextureDataRequest::default_instance_ = NULL;

TextureDataRequest* TextureDataRequest::New(::google::protobuf::Arena* arena) const {
  TextureDataRequest* n = new TextureDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextureDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_node_key()) {
      if (node_key_ != NULL) node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
    }
    texture_format_ = 1;
    view_direction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TextureDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_texture_format;
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
      case 2: {
        if (tag == 16) {
         parse_texture_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(value)) {
            set_texture_format(static_cast< ::geo_globetrotter_proto_rocktree::Texture_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_view_direction;
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 3;
      case 3: {
        if (tag == 24) {
         parse_view_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_globetrotter_proto_rocktree::Texture_ViewDirection_IsValid(value)) {
            set_view_direction(static_cast< ::geo_globetrotter_proto_rocktree::Texture_ViewDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.TextureDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.TextureDataRequest)
  return false;
#undef DO_
}

void TextureDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (has_node_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_key_, output);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
  if (has_texture_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->texture_format(), output);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 3;
  if (has_view_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->view_direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.TextureDataRequest)
}

::google::protobuf::uint8* TextureDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (has_node_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_key_, false, target);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
  if (has_texture_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->texture_format(), target);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 3;
  if (has_view_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->view_direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.TextureDataRequest)
  return target;
}

int TextureDataRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
    if (has_node_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_key_);
    }

    // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
    if (has_texture_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->texture_format());
    }

    // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 3;
    if (has_view_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->view_direction());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextureDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TextureDataRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TextureDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.TextureDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.TextureDataRequest)
    MergeFrom(*source);
  }
}

void TextureDataRequest::MergeFrom(const TextureDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_key()) {
      mutable_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.node_key());
    }
    if (from.has_texture_format()) {
      set_texture_format(from.texture_format());
    }
    if (from.has_view_direction()) {
      set_view_direction(from.view_direction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TextureDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextureDataRequest::CopyFrom(const TextureDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureDataRequest::IsInitialized() const {

  return true;
}

void TextureDataRequest::Swap(TextureDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextureDataRequest::InternalSwap(TextureDataRequest* other) {
  std::swap(node_key_, other->node_key_);
  std::swap(texture_format_, other->texture_format_);
  std::swap(view_direction_, other->view_direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextureDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextureDataRequest_descriptor_;
  metadata.reflection = TextureDataRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextureDataRequest

// optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
bool TextureDataRequest::has_node_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TextureDataRequest::set_has_node_key() {
  _has_bits_[0] |= 0x00000001u;
}
void TextureDataRequest::clear_has_node_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void TextureDataRequest::clear_node_key() {
  if (node_key_ != NULL) node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
  clear_has_node_key();
}
const ::geo_globetrotter_proto_rocktree::NodeKey& TextureDataRequest::node_key() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.TextureDataRequest.node_key)
  return node_key_ != NULL ? *node_key_ : *default_instance_->node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* TextureDataRequest::mutable_node_key() {
  set_has_node_key();
  if (node_key_ == NULL) {
    node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey;
  }
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.TextureDataRequest.node_key)
  return node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* TextureDataRequest::release_node_key() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.TextureDataRequest.node_key)
  clear_has_node_key();
  ::geo_globetrotter_proto_rocktree::NodeKey* temp = node_key_;
  node_key_ = NULL;
  return temp;
}
void TextureDataRequest::set_allocated_node_key(::geo_globetrotter_proto_rocktree::NodeKey* node_key) {
  delete node_key_;
  node_key_ = node_key;
  if (node_key) {
    set_has_node_key();
  } else {
    clear_has_node_key();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.TextureDataRequest.node_key)
}

// optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
bool TextureDataRequest::has_texture_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TextureDataRequest::set_has_texture_format() {
  _has_bits_[0] |= 0x00000002u;
}
void TextureDataRequest::clear_has_texture_format() {
  _has_bits_[0] &= ~0x00000002u;
}
void TextureDataRequest::clear_texture_format() {
  texture_format_ = 1;
  clear_has_texture_format();
}
 ::geo_globetrotter_proto_rocktree::Texture_Format TextureDataRequest::texture_format() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.TextureDataRequest.texture_format)
  return static_cast< ::geo_globetrotter_proto_rocktree::Texture_Format >(texture_format_);
}
 void TextureDataRequest::set_texture_format(::geo_globetrotter_proto_rocktree::Texture_Format value) {
  assert(::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(value));
  set_has_texture_format();
  texture_format_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.TextureDataRequest.texture_format)
}

// optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 3;
bool TextureDataRequest::has_view_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TextureDataRequest::set_has_view_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void TextureDataRequest::clear_has_view_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void TextureDataRequest::clear_view_direction() {
  view_direction_ = 0;
  clear_has_view_direction();
}
 ::geo_globetrotter_proto_rocktree::Texture_ViewDirection TextureDataRequest::view_direction() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.TextureDataRequest.view_direction)
  return static_cast< ::geo_globetrotter_proto_rocktree::Texture_ViewDirection >(view_direction_);
}
 void TextureDataRequest::set_view_direction(::geo_globetrotter_proto_rocktree::Texture_ViewDirection value) {
  assert(::geo_globetrotter_proto_rocktree::Texture_ViewDirection_IsValid(value));
  set_has_view_direction();
  view_direction_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.TextureDataRequest.view_direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulkMetadata::kNodeMetadataFieldNumber;
const int BulkMetadata::kHeadNodeKeyFieldNumber;
const int BulkMetadata::kHeadNodeCenterFieldNumber;
const int BulkMetadata::kMetersPerTexelFieldNumber;
const int BulkMetadata::kDefaultImageryEpochFieldNumber;
const int BulkMetadata::kDefaultAvailableTextureFormatsFieldNumber;
const int BulkMetadata::kDefaultAvailableViewDependentTexturesFieldNumber;
const int BulkMetadata::kDefaultAvailableViewDependentTextureFormatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulkMetadata::BulkMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.BulkMetadata)
}

void BulkMetadata::InitAsDefaultInstance() {
  head_node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(&::geo_globetrotter_proto_rocktree::NodeKey::default_instance());
}

BulkMetadata::BulkMetadata(const BulkMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.BulkMetadata)
}

void BulkMetadata::SharedCtor() {
  _cached_size_ = 0;
  head_node_key_ = NULL;
  default_imagery_epoch_ = 0u;
  default_available_texture_formats_ = 0u;
  default_available_view_dependent_textures_ = 0u;
  default_available_view_dependent_texture_formats_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulkMetadata::~BulkMetadata() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.BulkMetadata)
  SharedDtor();
}

void BulkMetadata::SharedDtor() {
  if (this != default_instance_) {
    delete head_node_key_;
  }
}

void BulkMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulkMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulkMetadata_descriptor_;
}

const BulkMetadata& BulkMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

BulkMetadata* BulkMetadata::default_instance_ = NULL;

BulkMetadata* BulkMetadata::New(::google::protobuf::Arena* arena) const {
  BulkMetadata* n = new BulkMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BulkMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.BulkMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BulkMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BulkMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 242u) {
    ZR_(default_imagery_epoch_, default_available_view_dependent_texture_formats_);
    if (has_head_node_key()) {
      if (head_node_key_ != NULL) head_node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  node_metadata_.Clear();
  head_node_center_.Clear();
  meters_per_texel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BulkMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .geo_globetrotter_proto_rocktree.NodeMetadata node_metadata = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_node_metadata;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_head_node_key;
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.NodeKey head_node_key = 2;
      case 2: {
        if (tag == 18) {
         parse_head_node_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head_node_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_head_node_center;
        break;
      }

      // repeated double head_node_center = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_head_node_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_head_node_center())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_head_node_center())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_meters_per_texel;
        break;
      }

      // repeated float meters_per_texel = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_meters_per_texel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_meters_per_texel())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_meters_per_texel())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_default_imagery_epoch;
        break;
      }

      // optional uint32 default_imagery_epoch = 5;
      case 5: {
        if (tag == 40) {
         parse_default_imagery_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_imagery_epoch_)));
          set_has_default_imagery_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_default_available_texture_formats;
        break;
      }

      // optional uint32 default_available_texture_formats = 6;
      case 6: {
        if (tag == 48) {
         parse_default_available_texture_formats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_available_texture_formats_)));
          set_has_default_available_texture_formats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_default_available_view_dependent_textures;
        break;
      }

      // optional uint32 default_available_view_dependent_textures = 7;
      case 7: {
        if (tag == 56) {
         parse_default_available_view_dependent_textures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_available_view_dependent_textures_)));
          set_has_default_available_view_dependent_textures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_default_available_view_dependent_texture_formats;
        break;
      }

      // optional uint32 default_available_view_dependent_texture_formats = 8;
      case 8: {
        if (tag == 64) {
         parse_default_available_view_dependent_texture_formats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_available_view_dependent_texture_formats_)));
          set_has_default_available_view_dependent_texture_formats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.BulkMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.BulkMetadata)
  return false;
#undef DO_
}

void BulkMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  // repeated .geo_globetrotter_proto_rocktree.NodeMetadata node_metadata = 1;
  for (unsigned int i = 0, n = this->node_metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_metadata(i), output);
  }

  // optional .geo_globetrotter_proto_rocktree.NodeKey head_node_key = 2;
  if (has_head_node_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->head_node_key_, output);
  }

  // repeated double head_node_center = 3 [packed = true];
  if (this->head_node_center_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_head_node_center_cached_byte_size_);
  }
  for (int i = 0; i < this->head_node_center_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->head_node_center(i), output);
  }

  // repeated float meters_per_texel = 4 [packed = true];
  if (this->meters_per_texel_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_meters_per_texel_cached_byte_size_);
  }
  for (int i = 0; i < this->meters_per_texel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->meters_per_texel(i), output);
  }

  // optional uint32 default_imagery_epoch = 5;
  if (has_default_imagery_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->default_imagery_epoch(), output);
  }

  // optional uint32 default_available_texture_formats = 6;
  if (has_default_available_texture_formats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->default_available_texture_formats(), output);
  }

  // optional uint32 default_available_view_dependent_textures = 7;
  if (has_default_available_view_dependent_textures()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->default_available_view_dependent_textures(), output);
  }

  // optional uint32 default_available_view_dependent_texture_formats = 8;
  if (has_default_available_view_dependent_texture_formats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->default_available_view_dependent_texture_formats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.BulkMetadata)
}

::google::protobuf::uint8* BulkMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  // repeated .geo_globetrotter_proto_rocktree.NodeMetadata node_metadata = 1;
  for (unsigned int i = 0, n = this->node_metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node_metadata(i), false, target);
  }

  // optional .geo_globetrotter_proto_rocktree.NodeKey head_node_key = 2;
  if (has_head_node_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->head_node_key_, false, target);
  }

  // repeated double head_node_center = 3 [packed = true];
  if (this->head_node_center_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _head_node_center_cached_byte_size_, target);
  }
  for (int i = 0; i < this->head_node_center_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->head_node_center(i), target);
  }

  // repeated float meters_per_texel = 4 [packed = true];
  if (this->meters_per_texel_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _meters_per_texel_cached_byte_size_, target);
  }
  for (int i = 0; i < this->meters_per_texel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->meters_per_texel(i), target);
  }

  // optional uint32 default_imagery_epoch = 5;
  if (has_default_imagery_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->default_imagery_epoch(), target);
  }

  // optional uint32 default_available_texture_formats = 6;
  if (has_default_available_texture_formats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->default_available_texture_formats(), target);
  }

  // optional uint32 default_available_view_dependent_textures = 7;
  if (has_default_available_view_dependent_textures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->default_available_view_dependent_textures(), target);
  }

  // optional uint32 default_available_view_dependent_texture_formats = 8;
  if (has_default_available_view_dependent_texture_formats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->default_available_view_dependent_texture_formats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.BulkMetadata)
  return target;
}

int BulkMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 242u) {
    // optional .geo_globetrotter_proto_rocktree.NodeKey head_node_key = 2;
    if (has_head_node_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->head_node_key_);
    }

    // optional uint32 default_imagery_epoch = 5;
    if (has_default_imagery_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_imagery_epoch());
    }

    // optional uint32 default_available_texture_formats = 6;
    if (has_default_available_texture_formats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_available_texture_formats());
    }

    // optional uint32 default_available_view_dependent_textures = 7;
    if (has_default_available_view_dependent_textures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_available_view_dependent_textures());
    }

    // optional uint32 default_available_view_dependent_texture_formats = 8;
    if (has_default_available_view_dependent_texture_formats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_available_view_dependent_texture_formats());
    }

  }
  // repeated .geo_globetrotter_proto_rocktree.NodeMetadata node_metadata = 1;
  total_size += 1 * this->node_metadata_size();
  for (int i = 0; i < this->node_metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_metadata(i));
  }

  // repeated double head_node_center = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->head_node_center_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _head_node_center_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float meters_per_texel = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->meters_per_texel_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _meters_per_texel_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulkMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BulkMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BulkMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.BulkMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.BulkMetadata)
    MergeFrom(*source);
  }
}

void BulkMetadata::MergeFrom(const BulkMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  node_metadata_.MergeFrom(from.node_metadata_);
  head_node_center_.MergeFrom(from.head_node_center_);
  meters_per_texel_.MergeFrom(from.meters_per_texel_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_head_node_key()) {
      mutable_head_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.head_node_key());
    }
    if (from.has_default_imagery_epoch()) {
      set_default_imagery_epoch(from.default_imagery_epoch());
    }
    if (from.has_default_available_texture_formats()) {
      set_default_available_texture_formats(from.default_available_texture_formats());
    }
    if (from.has_default_available_view_dependent_textures()) {
      set_default_available_view_dependent_textures(from.default_available_view_dependent_textures());
    }
    if (from.has_default_available_view_dependent_texture_formats()) {
      set_default_available_view_dependent_texture_formats(from.default_available_view_dependent_texture_formats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BulkMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkMetadata::CopyFrom(const BulkMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkMetadata::IsInitialized() const {

  return true;
}

void BulkMetadata::Swap(BulkMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulkMetadata::InternalSwap(BulkMetadata* other) {
  node_metadata_.UnsafeArenaSwap(&other->node_metadata_);
  std::swap(head_node_key_, other->head_node_key_);
  head_node_center_.UnsafeArenaSwap(&other->head_node_center_);
  meters_per_texel_.UnsafeArenaSwap(&other->meters_per_texel_);
  std::swap(default_imagery_epoch_, other->default_imagery_epoch_);
  std::swap(default_available_texture_formats_, other->default_available_texture_formats_);
  std::swap(default_available_view_dependent_textures_, other->default_available_view_dependent_textures_);
  std::swap(default_available_view_dependent_texture_formats_, other->default_available_view_dependent_texture_formats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BulkMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulkMetadata_descriptor_;
  metadata.reflection = BulkMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BulkMetadata

// repeated .geo_globetrotter_proto_rocktree.NodeMetadata node_metadata = 1;
int BulkMetadata::node_metadata_size() const {
  return node_metadata_.size();
}
void BulkMetadata::clear_node_metadata() {
  node_metadata_.Clear();
}
const ::geo_globetrotter_proto_rocktree::NodeMetadata& BulkMetadata::node_metadata(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.BulkMetadata.node_metadata)
  return node_metadata_.Get(index);
}
::geo_globetrotter_proto_rocktree::NodeMetadata* BulkMetadata::mutable_node_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.BulkMetadata.node_metadata)
  return node_metadata_.Mutable(index);
}
::geo_globetrotter_proto_rocktree::NodeMetadata* BulkMetadata::add_node_metadata() {
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.BulkMetadata.node_metadata)
  return node_metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::NodeMetadata >*
BulkMetadata::mutable_node_metadata() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.BulkMetadata.node_metadata)
  return &node_metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::NodeMetadata >&
BulkMetadata::node_metadata() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.BulkMetadata.node_metadata)
  return node_metadata_;
}

// optional .geo_globetrotter_proto_rocktree.NodeKey head_node_key = 2;
bool BulkMetadata::has_head_node_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BulkMetadata::set_has_head_node_key() {
  _has_bits_[0] |= 0x00000002u;
}
void BulkMetadata::clear_has_head_node_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void BulkMetadata::clear_head_node_key() {
  if (head_node_key_ != NULL) head_node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
  clear_has_head_node_key();
}
const ::geo_globetrotter_proto_rocktree::NodeKey& BulkMetadata::head_node_key() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.BulkMetadata.head_node_key)
  return head_node_key_ != NULL ? *head_node_key_ : *default_instance_->head_node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* BulkMetadata::mutable_head_node_key() {
  set_has_head_node_key();
  if (head_node_key_ == NULL) {
    head_node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey;
  }
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.BulkMetadata.head_node_key)
  return head_node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* BulkMetadata::release_head_node_key() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.BulkMetadata.head_node_key)
  clear_has_head_node_key();
  ::geo_globetrotter_proto_rocktree::NodeKey* temp = head_node_key_;
  head_node_key_ = NULL;
  return temp;
}
void BulkMetadata::set_allocated_head_node_key(::geo_globetrotter_proto_rocktree::NodeKey* head_node_key) {
  delete head_node_key_;
  head_node_key_ = head_node_key;
  if (head_node_key) {
    set_has_head_node_key();
  } else {
    clear_has_head_node_key();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.BulkMetadata.head_node_key)
}

// repeated double head_node_center = 3 [packed = true];
int BulkMetadata::head_node_center_size() const {
  return head_node_center_.size();
}
void BulkMetadata::clear_head_node_center() {
  head_node_center_.Clear();
}
 double BulkMetadata::head_node_center(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.BulkMetadata.head_node_center)
  return head_node_center_.Get(index);
}
 void BulkMetadata::set_head_node_center(int index, double value) {
  head_node_center_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.BulkMetadata.head_node_center)
}
 void BulkMetadata::add_head_node_center(double value) {
  head_node_center_.Add(value);
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.BulkMetadata.head_node_center)
}
 const ::google::protobuf::RepeatedField< double >&
BulkMetadata::head_node_center() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.BulkMetadata.head_node_center)
  return head_node_center_;
}
 ::google::protobuf::RepeatedField< double >*
BulkMetadata::mutable_head_node_center() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.BulkMetadata.head_node_center)
  return &head_node_center_;
}

// repeated float meters_per_texel = 4 [packed = true];
int BulkMetadata::meters_per_texel_size() const {
  return meters_per_texel_.size();
}
void BulkMetadata::clear_meters_per_texel() {
  meters_per_texel_.Clear();
}
 float BulkMetadata::meters_per_texel(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.BulkMetadata.meters_per_texel)
  return meters_per_texel_.Get(index);
}
 void BulkMetadata::set_meters_per_texel(int index, float value) {
  meters_per_texel_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.BulkMetadata.meters_per_texel)
}
 void BulkMetadata::add_meters_per_texel(float value) {
  meters_per_texel_.Add(value);
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.BulkMetadata.meters_per_texel)
}
 const ::google::protobuf::RepeatedField< float >&
BulkMetadata::meters_per_texel() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.BulkMetadata.meters_per_texel)
  return meters_per_texel_;
}
 ::google::protobuf::RepeatedField< float >*
BulkMetadata::mutable_meters_per_texel() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.BulkMetadata.meters_per_texel)
  return &meters_per_texel_;
}

// optional uint32 default_imagery_epoch = 5;
bool BulkMetadata::has_default_imagery_epoch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BulkMetadata::set_has_default_imagery_epoch() {
  _has_bits_[0] |= 0x00000010u;
}
void BulkMetadata::clear_has_default_imagery_epoch() {
  _has_bits_[0] &= ~0x00000010u;
}
void BulkMetadata::clear_default_imagery_epoch() {
  default_imagery_epoch_ = 0u;
  clear_has_default_imagery_epoch();
}
 ::google::protobuf::uint32 BulkMetadata::default_imagery_epoch() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.BulkMetadata.default_imagery_epoch)
  return default_imagery_epoch_;
}
 void BulkMetadata::set_default_imagery_epoch(::google::protobuf::uint32 value) {
  set_has_default_imagery_epoch();
  default_imagery_epoch_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.BulkMetadata.default_imagery_epoch)
}

// optional uint32 default_available_texture_formats = 6;
bool BulkMetadata::has_default_available_texture_formats() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BulkMetadata::set_has_default_available_texture_formats() {
  _has_bits_[0] |= 0x00000020u;
}
void BulkMetadata::clear_has_default_available_texture_formats() {
  _has_bits_[0] &= ~0x00000020u;
}
void BulkMetadata::clear_default_available_texture_formats() {
  default_available_texture_formats_ = 0u;
  clear_has_default_available_texture_formats();
}
 ::google::protobuf::uint32 BulkMetadata::default_available_texture_formats() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.BulkMetadata.default_available_texture_formats)
  return default_available_texture_formats_;
}
 void BulkMetadata::set_default_available_texture_formats(::google::protobuf::uint32 value) {
  set_has_default_available_texture_formats();
  default_available_texture_formats_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.BulkMetadata.default_available_texture_formats)
}

// optional uint32 default_available_view_dependent_textures = 7;
bool BulkMetadata::has_default_available_view_dependent_textures() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BulkMetadata::set_has_default_available_view_dependent_textures() {
  _has_bits_[0] |= 0x00000040u;
}
void BulkMetadata::clear_has_default_available_view_dependent_textures() {
  _has_bits_[0] &= ~0x00000040u;
}
void BulkMetadata::clear_default_available_view_dependent_textures() {
  default_available_view_dependent_textures_ = 0u;
  clear_has_default_available_view_dependent_textures();
}
 ::google::protobuf::uint32 BulkMetadata::default_available_view_dependent_textures() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.BulkMetadata.default_available_view_dependent_textures)
  return default_available_view_dependent_textures_;
}
 void BulkMetadata::set_default_available_view_dependent_textures(::google::protobuf::uint32 value) {
  set_has_default_available_view_dependent_textures();
  default_available_view_dependent_textures_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.BulkMetadata.default_available_view_dependent_textures)
}

// optional uint32 default_available_view_dependent_texture_formats = 8;
bool BulkMetadata::has_default_available_view_dependent_texture_formats() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BulkMetadata::set_has_default_available_view_dependent_texture_formats() {
  _has_bits_[0] |= 0x00000080u;
}
void BulkMetadata::clear_has_default_available_view_dependent_texture_formats() {
  _has_bits_[0] &= ~0x00000080u;
}
void BulkMetadata::clear_default_available_view_dependent_texture_formats() {
  default_available_view_dependent_texture_formats_ = 0u;
  clear_has_default_available_view_dependent_texture_formats();
}
 ::google::protobuf::uint32 BulkMetadata::default_available_view_dependent_texture_formats() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.BulkMetadata.default_available_view_dependent_texture_formats)
  return default_available_view_dependent_texture_formats_;
}
 void BulkMetadata::set_default_available_view_dependent_texture_formats(::google::protobuf::uint32 value) {
  set_has_default_available_view_dependent_texture_formats();
  default_available_view_dependent_texture_formats_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.BulkMetadata.default_available_view_dependent_texture_formats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* NodeMetadata_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMetadata_Flags_descriptor_;
}
bool NodeMetadata_Flags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NodeMetadata_Flags NodeMetadata::RICH3D_LEAF;
const NodeMetadata_Flags NodeMetadata::RICH3D_NODATA;
const NodeMetadata_Flags NodeMetadata::LEAF;
const NodeMetadata_Flags NodeMetadata::NODATA;
const NodeMetadata_Flags NodeMetadata::USE_IMAGERY_EPOCH;
const NodeMetadata_Flags NodeMetadata::Flags_MIN;
const NodeMetadata_Flags NodeMetadata::Flags_MAX;
const int NodeMetadata::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeMetadata::kPathAndFlagsFieldNumber;
const int NodeMetadata::kEpochFieldNumber;
const int NodeMetadata::kBulkMetadataEpochFieldNumber;
const int NodeMetadata::kOrientedBoundingBoxFieldNumber;
const int NodeMetadata::kMetersPerTexelFieldNumber;
const int NodeMetadata::kProcessingOrientedBoundingBoxFieldNumber;
const int NodeMetadata::kImageryEpochFieldNumber;
const int NodeMetadata::kAvailableTextureFormatsFieldNumber;
const int NodeMetadata::kAvailableViewDependentTexturesFieldNumber;
const int NodeMetadata::kAvailableViewDependentTextureFormatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeMetadata::NodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.NodeMetadata)
}

void NodeMetadata::InitAsDefaultInstance() {
}

NodeMetadata::NodeMetadata(const NodeMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.NodeMetadata)
}

void NodeMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_and_flags_ = 0u;
  epoch_ = 0u;
  bulk_metadata_epoch_ = 0u;
  oriented_bounding_box_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meters_per_texel_ = 0;
  imagery_epoch_ = 0u;
  available_texture_formats_ = 0u;
  available_view_dependent_textures_ = 0u;
  available_view_dependent_texture_formats_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMetadata::~NodeMetadata() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.NodeMetadata)
  SharedDtor();
}

void NodeMetadata::SharedDtor() {
  oriented_bounding_box_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NodeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMetadata_descriptor_;
}

const NodeMetadata& NodeMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

NodeMetadata* NodeMetadata::default_instance_ = NULL;

NodeMetadata* NodeMetadata::New(::google::protobuf::Arena* arena) const {
  NodeMetadata* n = new NodeMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.NodeMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NodeMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NodeMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 223u) {
    ZR_(path_and_flags_, epoch_);
    ZR_(bulk_metadata_epoch_, meters_per_texel_);
    ZR_(imagery_epoch_, available_texture_formats_);
    if (has_oriented_bounding_box()) {
      oriented_bounding_box_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(available_view_dependent_textures_, available_view_dependent_texture_formats_);

#undef ZR_HELPER_
#undef ZR_

  processing_oriented_bounding_box_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 path_and_flags = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &path_and_flags_)));
          set_has_path_and_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_epoch;
        break;
      }

      // optional uint32 epoch = 2;
      case 2: {
        if (tag == 16) {
         parse_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_oriented_bounding_box;
        break;
      }

      // optional bytes oriented_bounding_box = 3;
      case 3: {
        if (tag == 26) {
         parse_oriented_bounding_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oriented_bounding_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_meters_per_texel;
        break;
      }

      // optional float meters_per_texel = 4;
      case 4: {
        if (tag == 37) {
         parse_meters_per_texel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meters_per_texel_)));
          set_has_meters_per_texel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bulk_metadata_epoch;
        break;
      }

      // optional uint32 bulk_metadata_epoch = 5;
      case 5: {
        if (tag == 40) {
         parse_bulk_metadata_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulk_metadata_epoch_)));
          set_has_bulk_metadata_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_processing_oriented_bounding_box;
        break;
      }

      // repeated double processing_oriented_bounding_box = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_processing_oriented_bounding_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_processing_oriented_bounding_box())));
        } else if (tag == 49) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_processing_oriented_bounding_box())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_imagery_epoch;
        break;
      }

      // optional uint32 imagery_epoch = 7;
      case 7: {
        if (tag == 56) {
         parse_imagery_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagery_epoch_)));
          set_has_imagery_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_available_texture_formats;
        break;
      }

      // optional uint32 available_texture_formats = 8;
      case 8: {
        if (tag == 64) {
         parse_available_texture_formats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_texture_formats_)));
          set_has_available_texture_formats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_available_view_dependent_textures;
        break;
      }

      // optional uint32 available_view_dependent_textures = 9;
      case 9: {
        if (tag == 72) {
         parse_available_view_dependent_textures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_view_dependent_textures_)));
          set_has_available_view_dependent_textures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_available_view_dependent_texture_formats;
        break;
      }

      // optional uint32 available_view_dependent_texture_formats = 10;
      case 10: {
        if (tag == 80) {
         parse_available_view_dependent_texture_formats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_view_dependent_texture_formats_)));
          set_has_available_view_dependent_texture_formats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.NodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.NodeMetadata)
  return false;
#undef DO_
}

void NodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  // optional uint32 path_and_flags = 1;
  if (has_path_and_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->path_and_flags(), output);
  }

  // optional uint32 epoch = 2;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->epoch(), output);
  }

  // optional bytes oriented_bounding_box = 3;
  if (has_oriented_bounding_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->oriented_bounding_box(), output);
  }

  // optional float meters_per_texel = 4;
  if (has_meters_per_texel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->meters_per_texel(), output);
  }

  // optional uint32 bulk_metadata_epoch = 5;
  if (has_bulk_metadata_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bulk_metadata_epoch(), output);
  }

  // repeated double processing_oriented_bounding_box = 6 [packed = true];
  if (this->processing_oriented_bounding_box_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_processing_oriented_bounding_box_cached_byte_size_);
  }
  for (int i = 0; i < this->processing_oriented_bounding_box_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->processing_oriented_bounding_box(i), output);
  }

  // optional uint32 imagery_epoch = 7;
  if (has_imagery_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->imagery_epoch(), output);
  }

  // optional uint32 available_texture_formats = 8;
  if (has_available_texture_formats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->available_texture_formats(), output);
  }

  // optional uint32 available_view_dependent_textures = 9;
  if (has_available_view_dependent_textures()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->available_view_dependent_textures(), output);
  }

  // optional uint32 available_view_dependent_texture_formats = 10;
  if (has_available_view_dependent_texture_formats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->available_view_dependent_texture_formats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.NodeMetadata)
}

::google::protobuf::uint8* NodeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  // optional uint32 path_and_flags = 1;
  if (has_path_and_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->path_and_flags(), target);
  }

  // optional uint32 epoch = 2;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->epoch(), target);
  }

  // optional bytes oriented_bounding_box = 3;
  if (has_oriented_bounding_box()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->oriented_bounding_box(), target);
  }

  // optional float meters_per_texel = 4;
  if (has_meters_per_texel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->meters_per_texel(), target);
  }

  // optional uint32 bulk_metadata_epoch = 5;
  if (has_bulk_metadata_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bulk_metadata_epoch(), target);
  }

  // repeated double processing_oriented_bounding_box = 6 [packed = true];
  if (this->processing_oriented_bounding_box_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _processing_oriented_bounding_box_cached_byte_size_, target);
  }
  for (int i = 0; i < this->processing_oriented_bounding_box_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->processing_oriented_bounding_box(i), target);
  }

  // optional uint32 imagery_epoch = 7;
  if (has_imagery_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->imagery_epoch(), target);
  }

  // optional uint32 available_texture_formats = 8;
  if (has_available_texture_formats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->available_texture_formats(), target);
  }

  // optional uint32 available_view_dependent_textures = 9;
  if (has_available_view_dependent_textures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->available_view_dependent_textures(), target);
  }

  // optional uint32 available_view_dependent_texture_formats = 10;
  if (has_available_view_dependent_texture_formats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->available_view_dependent_texture_formats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.NodeMetadata)
  return target;
}

int NodeMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 223u) {
    // optional uint32 path_and_flags = 1;
    if (has_path_and_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->path_and_flags());
    }

    // optional uint32 epoch = 2;
    if (has_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epoch());
    }

    // optional uint32 bulk_metadata_epoch = 5;
    if (has_bulk_metadata_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulk_metadata_epoch());
    }

    // optional bytes oriented_bounding_box = 3;
    if (has_oriented_bounding_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oriented_bounding_box());
    }

    // optional float meters_per_texel = 4;
    if (has_meters_per_texel()) {
      total_size += 1 + 4;
    }

    // optional uint32 imagery_epoch = 7;
    if (has_imagery_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagery_epoch());
    }

    // optional uint32 available_texture_formats = 8;
    if (has_available_texture_formats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available_texture_formats());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 available_view_dependent_textures = 9;
    if (has_available_view_dependent_textures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available_view_dependent_textures());
    }

    // optional uint32 available_view_dependent_texture_formats = 10;
    if (has_available_view_dependent_texture_formats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available_view_dependent_texture_formats());
    }

  }
  // repeated double processing_oriented_bounding_box = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->processing_oriented_bounding_box_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _processing_oriented_bounding_box_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.NodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.NodeMetadata)
    MergeFrom(*source);
  }
}

void NodeMetadata::MergeFrom(const NodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  processing_oriented_bounding_box_.MergeFrom(from.processing_oriented_bounding_box_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_and_flags()) {
      set_path_and_flags(from.path_and_flags());
    }
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
    if (from.has_bulk_metadata_epoch()) {
      set_bulk_metadata_epoch(from.bulk_metadata_epoch());
    }
    if (from.has_oriented_bounding_box()) {
      set_has_oriented_bounding_box();
      oriented_bounding_box_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oriented_bounding_box_);
    }
    if (from.has_meters_per_texel()) {
      set_meters_per_texel(from.meters_per_texel());
    }
    if (from.has_imagery_epoch()) {
      set_imagery_epoch(from.imagery_epoch());
    }
    if (from.has_available_texture_formats()) {
      set_available_texture_formats(from.available_texture_formats());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_available_view_dependent_textures()) {
      set_available_view_dependent_textures(from.available_view_dependent_textures());
    }
    if (from.has_available_view_dependent_texture_formats()) {
      set_available_view_dependent_texture_formats(from.available_view_dependent_texture_formats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMetadata::CopyFrom(const NodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMetadata::IsInitialized() const {

  return true;
}

void NodeMetadata::Swap(NodeMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeMetadata::InternalSwap(NodeMetadata* other) {
  std::swap(path_and_flags_, other->path_and_flags_);
  std::swap(epoch_, other->epoch_);
  std::swap(bulk_metadata_epoch_, other->bulk_metadata_epoch_);
  oriented_bounding_box_.Swap(&other->oriented_bounding_box_);
  std::swap(meters_per_texel_, other->meters_per_texel_);
  processing_oriented_bounding_box_.UnsafeArenaSwap(&other->processing_oriented_bounding_box_);
  std::swap(imagery_epoch_, other->imagery_epoch_);
  std::swap(available_texture_formats_, other->available_texture_formats_);
  std::swap(available_view_dependent_textures_, other->available_view_dependent_textures_);
  std::swap(available_view_dependent_texture_formats_, other->available_view_dependent_texture_formats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMetadata_descriptor_;
  metadata.reflection = NodeMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeMetadata

// optional uint32 path_and_flags = 1;
bool NodeMetadata::has_path_and_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeMetadata::set_has_path_and_flags() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeMetadata::clear_has_path_and_flags() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeMetadata::clear_path_and_flags() {
  path_and_flags_ = 0u;
  clear_has_path_and_flags();
}
 ::google::protobuf::uint32 NodeMetadata::path_and_flags() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeMetadata.path_and_flags)
  return path_and_flags_;
}
 void NodeMetadata::set_path_and_flags(::google::protobuf::uint32 value) {
  set_has_path_and_flags();
  path_and_flags_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeMetadata.path_and_flags)
}

// optional uint32 epoch = 2;
bool NodeMetadata::has_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeMetadata::set_has_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeMetadata::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeMetadata::clear_epoch() {
  epoch_ = 0u;
  clear_has_epoch();
}
 ::google::protobuf::uint32 NodeMetadata::epoch() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeMetadata.epoch)
  return epoch_;
}
 void NodeMetadata::set_epoch(::google::protobuf::uint32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeMetadata.epoch)
}

// optional uint32 bulk_metadata_epoch = 5;
bool NodeMetadata::has_bulk_metadata_epoch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NodeMetadata::set_has_bulk_metadata_epoch() {
  _has_bits_[0] |= 0x00000004u;
}
void NodeMetadata::clear_has_bulk_metadata_epoch() {
  _has_bits_[0] &= ~0x00000004u;
}
void NodeMetadata::clear_bulk_metadata_epoch() {
  bulk_metadata_epoch_ = 0u;
  clear_has_bulk_metadata_epoch();
}
 ::google::protobuf::uint32 NodeMetadata::bulk_metadata_epoch() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeMetadata.bulk_metadata_epoch)
  return bulk_metadata_epoch_;
}
 void NodeMetadata::set_bulk_metadata_epoch(::google::protobuf::uint32 value) {
  set_has_bulk_metadata_epoch();
  bulk_metadata_epoch_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeMetadata.bulk_metadata_epoch)
}

// optional bytes oriented_bounding_box = 3;
bool NodeMetadata::has_oriented_bounding_box() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NodeMetadata::set_has_oriented_bounding_box() {
  _has_bits_[0] |= 0x00000008u;
}
void NodeMetadata::clear_has_oriented_bounding_box() {
  _has_bits_[0] &= ~0x00000008u;
}
void NodeMetadata::clear_oriented_bounding_box() {
  oriented_bounding_box_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oriented_bounding_box();
}
 const ::std::string& NodeMetadata::oriented_bounding_box() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeMetadata.oriented_bounding_box)
  return oriented_bounding_box_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeMetadata::set_oriented_bounding_box(const ::std::string& value) {
  set_has_oriented_bounding_box();
  oriented_bounding_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeMetadata.oriented_bounding_box)
}
 void NodeMetadata::set_oriented_bounding_box(const char* value) {
  set_has_oriented_bounding_box();
  oriented_bounding_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.NodeMetadata.oriented_bounding_box)
}
 void NodeMetadata::set_oriented_bounding_box(const void* value, size_t size) {
  set_has_oriented_bounding_box();
  oriented_bounding_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.NodeMetadata.oriented_bounding_box)
}
 ::std::string* NodeMetadata::mutable_oriented_bounding_box() {
  set_has_oriented_bounding_box();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.NodeMetadata.oriented_bounding_box)
  return oriented_bounding_box_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NodeMetadata::release_oriented_bounding_box() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.NodeMetadata.oriented_bounding_box)
  clear_has_oriented_bounding_box();
  return oriented_bounding_box_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeMetadata::set_allocated_oriented_bounding_box(::std::string* oriented_bounding_box) {
  if (oriented_bounding_box != NULL) {
    set_has_oriented_bounding_box();
  } else {
    clear_has_oriented_bounding_box();
  }
  oriented_bounding_box_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oriented_bounding_box);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.NodeMetadata.oriented_bounding_box)
}

// optional float meters_per_texel = 4;
bool NodeMetadata::has_meters_per_texel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NodeMetadata::set_has_meters_per_texel() {
  _has_bits_[0] |= 0x00000010u;
}
void NodeMetadata::clear_has_meters_per_texel() {
  _has_bits_[0] &= ~0x00000010u;
}
void NodeMetadata::clear_meters_per_texel() {
  meters_per_texel_ = 0;
  clear_has_meters_per_texel();
}
 float NodeMetadata::meters_per_texel() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeMetadata.meters_per_texel)
  return meters_per_texel_;
}
 void NodeMetadata::set_meters_per_texel(float value) {
  set_has_meters_per_texel();
  meters_per_texel_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeMetadata.meters_per_texel)
}

// repeated double processing_oriented_bounding_box = 6 [packed = true];
int NodeMetadata::processing_oriented_bounding_box_size() const {
  return processing_oriented_bounding_box_.size();
}
void NodeMetadata::clear_processing_oriented_bounding_box() {
  processing_oriented_bounding_box_.Clear();
}
 double NodeMetadata::processing_oriented_bounding_box(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeMetadata.processing_oriented_bounding_box)
  return processing_oriented_bounding_box_.Get(index);
}
 void NodeMetadata::set_processing_oriented_bounding_box(int index, double value) {
  processing_oriented_bounding_box_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeMetadata.processing_oriented_bounding_box)
}
 void NodeMetadata::add_processing_oriented_bounding_box(double value) {
  processing_oriented_bounding_box_.Add(value);
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.NodeMetadata.processing_oriented_bounding_box)
}
 const ::google::protobuf::RepeatedField< double >&
NodeMetadata::processing_oriented_bounding_box() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.NodeMetadata.processing_oriented_bounding_box)
  return processing_oriented_bounding_box_;
}
 ::google::protobuf::RepeatedField< double >*
NodeMetadata::mutable_processing_oriented_bounding_box() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.NodeMetadata.processing_oriented_bounding_box)
  return &processing_oriented_bounding_box_;
}

// optional uint32 imagery_epoch = 7;
bool NodeMetadata::has_imagery_epoch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NodeMetadata::set_has_imagery_epoch() {
  _has_bits_[0] |= 0x00000040u;
}
void NodeMetadata::clear_has_imagery_epoch() {
  _has_bits_[0] &= ~0x00000040u;
}
void NodeMetadata::clear_imagery_epoch() {
  imagery_epoch_ = 0u;
  clear_has_imagery_epoch();
}
 ::google::protobuf::uint32 NodeMetadata::imagery_epoch() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeMetadata.imagery_epoch)
  return imagery_epoch_;
}
 void NodeMetadata::set_imagery_epoch(::google::protobuf::uint32 value) {
  set_has_imagery_epoch();
  imagery_epoch_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeMetadata.imagery_epoch)
}

// optional uint32 available_texture_formats = 8;
bool NodeMetadata::has_available_texture_formats() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NodeMetadata::set_has_available_texture_formats() {
  _has_bits_[0] |= 0x00000080u;
}
void NodeMetadata::clear_has_available_texture_formats() {
  _has_bits_[0] &= ~0x00000080u;
}
void NodeMetadata::clear_available_texture_formats() {
  available_texture_formats_ = 0u;
  clear_has_available_texture_formats();
}
 ::google::protobuf::uint32 NodeMetadata::available_texture_formats() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeMetadata.available_texture_formats)
  return available_texture_formats_;
}
 void NodeMetadata::set_available_texture_formats(::google::protobuf::uint32 value) {
  set_has_available_texture_formats();
  available_texture_formats_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeMetadata.available_texture_formats)
}

// optional uint32 available_view_dependent_textures = 9;
bool NodeMetadata::has_available_view_dependent_textures() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NodeMetadata::set_has_available_view_dependent_textures() {
  _has_bits_[0] |= 0x00000100u;
}
void NodeMetadata::clear_has_available_view_dependent_textures() {
  _has_bits_[0] &= ~0x00000100u;
}
void NodeMetadata::clear_available_view_dependent_textures() {
  available_view_dependent_textures_ = 0u;
  clear_has_available_view_dependent_textures();
}
 ::google::protobuf::uint32 NodeMetadata::available_view_dependent_textures() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeMetadata.available_view_dependent_textures)
  return available_view_dependent_textures_;
}
 void NodeMetadata::set_available_view_dependent_textures(::google::protobuf::uint32 value) {
  set_has_available_view_dependent_textures();
  available_view_dependent_textures_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeMetadata.available_view_dependent_textures)
}

// optional uint32 available_view_dependent_texture_formats = 10;
bool NodeMetadata::has_available_view_dependent_texture_formats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NodeMetadata::set_has_available_view_dependent_texture_formats() {
  _has_bits_[0] |= 0x00000200u;
}
void NodeMetadata::clear_has_available_view_dependent_texture_formats() {
  _has_bits_[0] &= ~0x00000200u;
}
void NodeMetadata::clear_available_view_dependent_texture_formats() {
  available_view_dependent_texture_formats_ = 0u;
  clear_has_available_view_dependent_texture_formats();
}
 ::google::protobuf::uint32 NodeMetadata::available_view_dependent_texture_formats() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeMetadata.available_view_dependent_texture_formats)
  return available_view_dependent_texture_formats_;
}
 void NodeMetadata::set_available_view_dependent_texture_formats(::google::protobuf::uint32 value) {
  set_has_available_view_dependent_texture_formats();
  available_view_dependent_texture_formats_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeMetadata.available_view_dependent_texture_formats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeData::kMatrixGlobeFromMeshFieldNumber;
const int NodeData::kMeshesFieldNumber;
const int NodeData::kCopyrightIdsFieldNumber;
const int NodeData::kNodeKeyFieldNumber;
const int NodeData::kKmlBoundingBoxFieldNumber;
const int NodeData::kWaterMeshFieldNumber;
const int NodeData::kOverlaySurfaceMeshesFieldNumber;
const int NodeData::kForNormalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeData::NodeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.NodeData)
}

void NodeData::InitAsDefaultInstance() {
  node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(&::geo_globetrotter_proto_rocktree::NodeKey::default_instance());
  water_mesh_ = const_cast< ::geo_globetrotter_proto_rocktree::Mesh*>(&::geo_globetrotter_proto_rocktree::Mesh::default_instance());
}

NodeData::NodeData(const NodeData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.NodeData)
}

void NodeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_key_ = NULL;
  water_mesh_ = NULL;
  for_normals_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeData::~NodeData() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.NodeData)
  SharedDtor();
}

void NodeData::SharedDtor() {
  for_normals_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete node_key_;
    delete water_mesh_;
  }
}

void NodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeData_descriptor_;
}

const NodeData& NodeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

NodeData* NodeData::default_instance_ = NULL;

NodeData* NodeData::New(::google::protobuf::Arena* arena) const {
  NodeData* n = new NodeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.NodeData)
  if (_has_bits_[0 / 32] & 168u) {
    if (has_node_key()) {
      if (node_key_ != NULL) node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
    }
    if (has_water_mesh()) {
      if (water_mesh_ != NULL) water_mesh_->::geo_globetrotter_proto_rocktree::Mesh::Clear();
    }
    if (has_for_normals()) {
      for_normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  matrix_globe_from_mesh_.Clear();
  meshes_.Clear();
  copyright_ids_.Clear();
  kml_bounding_box_.Clear();
  overlay_surface_meshes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.NodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double matrix_globe_from_mesh = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix_globe_from_mesh())));
        } else if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_matrix_globe_from_mesh())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_meshes;
        break;
      }

      // repeated .geo_globetrotter_proto_rocktree.Mesh meshes = 2;
      case 2: {
        if (tag == 18) {
         parse_meshes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_meshes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_meshes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_meshes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_copyright_ids;
        break;
      }

      // repeated uint32 copyright_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_copyright_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_copyright_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_copyright_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_copyright_ids;
        if (input->ExpectTag(34)) goto parse_node_key;
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 4;
      case 4: {
        if (tag == 34) {
         parse_node_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_kml_bounding_box;
        break;
      }

      // repeated double kml_bounding_box = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_kml_bounding_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_kml_bounding_box())));
        } else if (tag == 41) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42, input, this->mutable_kml_bounding_box())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_water_mesh;
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Mesh water_mesh = 6;
      case 6: {
        if (tag == 50) {
         parse_water_mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_water_mesh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_overlay_surface_meshes;
        break;
      }

      // repeated .geo_globetrotter_proto_rocktree.Mesh overlay_surface_meshes = 7;
      case 7: {
        if (tag == 58) {
         parse_overlay_surface_meshes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_overlay_surface_meshes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_overlay_surface_meshes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_overlay_surface_meshes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_for_normals;
        break;
      }

      // optional bytes for_normals = 8;
      case 8: {
        if (tag == 66) {
         parse_for_normals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_for_normals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.NodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.NodeData)
  return false;
#undef DO_
}

void NodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.NodeData)
  // repeated double matrix_globe_from_mesh = 1 [packed = true];
  if (this->matrix_globe_from_mesh_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_matrix_globe_from_mesh_cached_byte_size_);
  }
  for (int i = 0; i < this->matrix_globe_from_mesh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->matrix_globe_from_mesh(i), output);
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh meshes = 2;
  for (unsigned int i = 0, n = this->meshes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->meshes(i), output);
  }

  // repeated uint32 copyright_ids = 3;
  for (int i = 0; i < this->copyright_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->copyright_ids(i), output);
  }

  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 4;
  if (has_node_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->node_key_, output);
  }

  // repeated double kml_bounding_box = 5 [packed = true];
  if (this->kml_bounding_box_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kml_bounding_box_cached_byte_size_);
  }
  for (int i = 0; i < this->kml_bounding_box_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->kml_bounding_box(i), output);
  }

  // optional .geo_globetrotter_proto_rocktree.Mesh water_mesh = 6;
  if (has_water_mesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->water_mesh_, output);
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh overlay_surface_meshes = 7;
  for (unsigned int i = 0, n = this->overlay_surface_meshes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->overlay_surface_meshes(i), output);
  }

  // optional bytes for_normals = 8;
  if (has_for_normals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->for_normals(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.NodeData)
}

::google::protobuf::uint8* NodeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.NodeData)
  // repeated double matrix_globe_from_mesh = 1 [packed = true];
  if (this->matrix_globe_from_mesh_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _matrix_globe_from_mesh_cached_byte_size_, target);
  }
  for (int i = 0; i < this->matrix_globe_from_mesh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->matrix_globe_from_mesh(i), target);
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh meshes = 2;
  for (unsigned int i = 0, n = this->meshes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->meshes(i), false, target);
  }

  // repeated uint32 copyright_ids = 3;
  for (int i = 0; i < this->copyright_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->copyright_ids(i), target);
  }

  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 4;
  if (has_node_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->node_key_, false, target);
  }

  // repeated double kml_bounding_box = 5 [packed = true];
  if (this->kml_bounding_box_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _kml_bounding_box_cached_byte_size_, target);
  }
  for (int i = 0; i < this->kml_bounding_box_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->kml_bounding_box(i), target);
  }

  // optional .geo_globetrotter_proto_rocktree.Mesh water_mesh = 6;
  if (has_water_mesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->water_mesh_, false, target);
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh overlay_surface_meshes = 7;
  for (unsigned int i = 0, n = this->overlay_surface_meshes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->overlay_surface_meshes(i), false, target);
  }

  // optional bytes for_normals = 8;
  if (has_for_normals()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->for_normals(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.NodeData)
  return target;
}

int NodeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.NodeData)
  int total_size = 0;

  if (_has_bits_[3 / 32] & 168u) {
    // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 4;
    if (has_node_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_key_);
    }

    // optional .geo_globetrotter_proto_rocktree.Mesh water_mesh = 6;
    if (has_water_mesh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->water_mesh_);
    }

    // optional bytes for_normals = 8;
    if (has_for_normals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->for_normals());
    }

  }
  // repeated double matrix_globe_from_mesh = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->matrix_globe_from_mesh_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _matrix_globe_from_mesh_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh meshes = 2;
  total_size += 1 * this->meshes_size();
  for (int i = 0; i < this->meshes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->meshes(i));
  }

  // repeated uint32 copyright_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->copyright_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->copyright_ids(i));
    }
    total_size += 1 * this->copyright_ids_size() + data_size;
  }

  // repeated double kml_bounding_box = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->kml_bounding_box_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _kml_bounding_box_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh overlay_surface_meshes = 7;
  total_size += 1 * this->overlay_surface_meshes_size();
  for (int i = 0; i < this->overlay_surface_meshes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->overlay_surface_meshes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.NodeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.NodeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.NodeData)
    MergeFrom(*source);
  }
}

void NodeData::MergeFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.NodeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  matrix_globe_from_mesh_.MergeFrom(from.matrix_globe_from_mesh_);
  meshes_.MergeFrom(from.meshes_);
  copyright_ids_.MergeFrom(from.copyright_ids_);
  kml_bounding_box_.MergeFrom(from.kml_bounding_box_);
  overlay_surface_meshes_.MergeFrom(from.overlay_surface_meshes_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_node_key()) {
      mutable_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.node_key());
    }
    if (from.has_water_mesh()) {
      mutable_water_mesh()->::geo_globetrotter_proto_rocktree::Mesh::MergeFrom(from.water_mesh());
    }
    if (from.has_for_normals()) {
      set_has_for_normals();
      for_normals_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.for_normals_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NodeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeData::CopyFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeData::IsInitialized() const {

  return true;
}

void NodeData::Swap(NodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeData::InternalSwap(NodeData* other) {
  matrix_globe_from_mesh_.UnsafeArenaSwap(&other->matrix_globe_from_mesh_);
  meshes_.UnsafeArenaSwap(&other->meshes_);
  copyright_ids_.UnsafeArenaSwap(&other->copyright_ids_);
  std::swap(node_key_, other->node_key_);
  kml_bounding_box_.UnsafeArenaSwap(&other->kml_bounding_box_);
  std::swap(water_mesh_, other->water_mesh_);
  overlay_surface_meshes_.UnsafeArenaSwap(&other->overlay_surface_meshes_);
  for_normals_.Swap(&other->for_normals_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeData_descriptor_;
  metadata.reflection = NodeData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeData

// repeated double matrix_globe_from_mesh = 1 [packed = true];
int NodeData::matrix_globe_from_mesh_size() const {
  return matrix_globe_from_mesh_.size();
}
void NodeData::clear_matrix_globe_from_mesh() {
  matrix_globe_from_mesh_.Clear();
}
 double NodeData::matrix_globe_from_mesh(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeData.matrix_globe_from_mesh)
  return matrix_globe_from_mesh_.Get(index);
}
 void NodeData::set_matrix_globe_from_mesh(int index, double value) {
  matrix_globe_from_mesh_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeData.matrix_globe_from_mesh)
}
 void NodeData::add_matrix_globe_from_mesh(double value) {
  matrix_globe_from_mesh_.Add(value);
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.NodeData.matrix_globe_from_mesh)
}
 const ::google::protobuf::RepeatedField< double >&
NodeData::matrix_globe_from_mesh() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.NodeData.matrix_globe_from_mesh)
  return matrix_globe_from_mesh_;
}
 ::google::protobuf::RepeatedField< double >*
NodeData::mutable_matrix_globe_from_mesh() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.NodeData.matrix_globe_from_mesh)
  return &matrix_globe_from_mesh_;
}

// repeated .geo_globetrotter_proto_rocktree.Mesh meshes = 2;
int NodeData::meshes_size() const {
  return meshes_.size();
}
void NodeData::clear_meshes() {
  meshes_.Clear();
}
const ::geo_globetrotter_proto_rocktree::Mesh& NodeData::meshes(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeData.meshes)
  return meshes_.Get(index);
}
::geo_globetrotter_proto_rocktree::Mesh* NodeData::mutable_meshes(int index) {
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.NodeData.meshes)
  return meshes_.Mutable(index);
}
::geo_globetrotter_proto_rocktree::Mesh* NodeData::add_meshes() {
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.NodeData.meshes)
  return meshes_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::Mesh >*
NodeData::mutable_meshes() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.NodeData.meshes)
  return &meshes_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::Mesh >&
NodeData::meshes() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.NodeData.meshes)
  return meshes_;
}

// repeated uint32 copyright_ids = 3;
int NodeData::copyright_ids_size() const {
  return copyright_ids_.size();
}
void NodeData::clear_copyright_ids() {
  copyright_ids_.Clear();
}
 ::google::protobuf::uint32 NodeData::copyright_ids(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeData.copyright_ids)
  return copyright_ids_.Get(index);
}
 void NodeData::set_copyright_ids(int index, ::google::protobuf::uint32 value) {
  copyright_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeData.copyright_ids)
}
 void NodeData::add_copyright_ids(::google::protobuf::uint32 value) {
  copyright_ids_.Add(value);
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.NodeData.copyright_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NodeData::copyright_ids() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.NodeData.copyright_ids)
  return copyright_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NodeData::mutable_copyright_ids() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.NodeData.copyright_ids)
  return &copyright_ids_;
}

// optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 4;
bool NodeData::has_node_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NodeData::set_has_node_key() {
  _has_bits_[0] |= 0x00000008u;
}
void NodeData::clear_has_node_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void NodeData::clear_node_key() {
  if (node_key_ != NULL) node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
  clear_has_node_key();
}
const ::geo_globetrotter_proto_rocktree::NodeKey& NodeData::node_key() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeData.node_key)
  return node_key_ != NULL ? *node_key_ : *default_instance_->node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* NodeData::mutable_node_key() {
  set_has_node_key();
  if (node_key_ == NULL) {
    node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey;
  }
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.NodeData.node_key)
  return node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* NodeData::release_node_key() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.NodeData.node_key)
  clear_has_node_key();
  ::geo_globetrotter_proto_rocktree::NodeKey* temp = node_key_;
  node_key_ = NULL;
  return temp;
}
void NodeData::set_allocated_node_key(::geo_globetrotter_proto_rocktree::NodeKey* node_key) {
  delete node_key_;
  node_key_ = node_key;
  if (node_key) {
    set_has_node_key();
  } else {
    clear_has_node_key();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.NodeData.node_key)
}

// repeated double kml_bounding_box = 5 [packed = true];
int NodeData::kml_bounding_box_size() const {
  return kml_bounding_box_.size();
}
void NodeData::clear_kml_bounding_box() {
  kml_bounding_box_.Clear();
}
 double NodeData::kml_bounding_box(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeData.kml_bounding_box)
  return kml_bounding_box_.Get(index);
}
 void NodeData::set_kml_bounding_box(int index, double value) {
  kml_bounding_box_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeData.kml_bounding_box)
}
 void NodeData::add_kml_bounding_box(double value) {
  kml_bounding_box_.Add(value);
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.NodeData.kml_bounding_box)
}
 const ::google::protobuf::RepeatedField< double >&
NodeData::kml_bounding_box() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.NodeData.kml_bounding_box)
  return kml_bounding_box_;
}
 ::google::protobuf::RepeatedField< double >*
NodeData::mutable_kml_bounding_box() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.NodeData.kml_bounding_box)
  return &kml_bounding_box_;
}

// optional .geo_globetrotter_proto_rocktree.Mesh water_mesh = 6;
bool NodeData::has_water_mesh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NodeData::set_has_water_mesh() {
  _has_bits_[0] |= 0x00000020u;
}
void NodeData::clear_has_water_mesh() {
  _has_bits_[0] &= ~0x00000020u;
}
void NodeData::clear_water_mesh() {
  if (water_mesh_ != NULL) water_mesh_->::geo_globetrotter_proto_rocktree::Mesh::Clear();
  clear_has_water_mesh();
}
const ::geo_globetrotter_proto_rocktree::Mesh& NodeData::water_mesh() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeData.water_mesh)
  return water_mesh_ != NULL ? *water_mesh_ : *default_instance_->water_mesh_;
}
::geo_globetrotter_proto_rocktree::Mesh* NodeData::mutable_water_mesh() {
  set_has_water_mesh();
  if (water_mesh_ == NULL) {
    water_mesh_ = new ::geo_globetrotter_proto_rocktree::Mesh;
  }
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.NodeData.water_mesh)
  return water_mesh_;
}
::geo_globetrotter_proto_rocktree::Mesh* NodeData::release_water_mesh() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.NodeData.water_mesh)
  clear_has_water_mesh();
  ::geo_globetrotter_proto_rocktree::Mesh* temp = water_mesh_;
  water_mesh_ = NULL;
  return temp;
}
void NodeData::set_allocated_water_mesh(::geo_globetrotter_proto_rocktree::Mesh* water_mesh) {
  delete water_mesh_;
  water_mesh_ = water_mesh;
  if (water_mesh) {
    set_has_water_mesh();
  } else {
    clear_has_water_mesh();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.NodeData.water_mesh)
}

// repeated .geo_globetrotter_proto_rocktree.Mesh overlay_surface_meshes = 7;
int NodeData::overlay_surface_meshes_size() const {
  return overlay_surface_meshes_.size();
}
void NodeData::clear_overlay_surface_meshes() {
  overlay_surface_meshes_.Clear();
}
const ::geo_globetrotter_proto_rocktree::Mesh& NodeData::overlay_surface_meshes(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeData.overlay_surface_meshes)
  return overlay_surface_meshes_.Get(index);
}
::geo_globetrotter_proto_rocktree::Mesh* NodeData::mutable_overlay_surface_meshes(int index) {
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.NodeData.overlay_surface_meshes)
  return overlay_surface_meshes_.Mutable(index);
}
::geo_globetrotter_proto_rocktree::Mesh* NodeData::add_overlay_surface_meshes() {
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.NodeData.overlay_surface_meshes)
  return overlay_surface_meshes_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::Mesh >*
NodeData::mutable_overlay_surface_meshes() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.NodeData.overlay_surface_meshes)
  return &overlay_surface_meshes_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::Mesh >&
NodeData::overlay_surface_meshes() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.NodeData.overlay_surface_meshes)
  return overlay_surface_meshes_;
}

// optional bytes for_normals = 8;
bool NodeData::has_for_normals() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NodeData::set_has_for_normals() {
  _has_bits_[0] |= 0x00000080u;
}
void NodeData::clear_has_for_normals() {
  _has_bits_[0] &= ~0x00000080u;
}
void NodeData::clear_for_normals() {
  for_normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_for_normals();
}
 const ::std::string& NodeData::for_normals() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.NodeData.for_normals)
  return for_normals_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeData::set_for_normals(const ::std::string& value) {
  set_has_for_normals();
  for_normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.NodeData.for_normals)
}
 void NodeData::set_for_normals(const char* value) {
  set_has_for_normals();
  for_normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.NodeData.for_normals)
}
 void NodeData::set_for_normals(const void* value, size_t size) {
  set_has_for_normals();
  for_normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.NodeData.for_normals)
}
 ::std::string* NodeData::mutable_for_normals() {
  set_has_for_normals();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.NodeData.for_normals)
  return for_normals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NodeData::release_for_normals() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.NodeData.for_normals)
  clear_has_for_normals();
  return for_normals_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeData::set_allocated_for_normals(::std::string* for_normals) {
  if (for_normals != NULL) {
    set_has_for_normals();
  } else {
    clear_has_for_normals();
  }
  for_normals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), for_normals);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.NodeData.for_normals)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Mesh_Layer_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_Layer_descriptor_;
}
bool Mesh_Layer_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mesh_Layer Mesh::OVERGROUND;
const Mesh_Layer Mesh::TERRAIN_BELOW_WATER;
const Mesh_Layer Mesh::TERRAIN_ABOVE_WATER;
const Mesh_Layer Mesh::TERRAIN_HIDDEN;
const Mesh_Layer Mesh::WATER;
const Mesh_Layer Mesh::WATER_SKIRTS;
const Mesh_Layer Mesh::WATER_SKIRTS_INVERTED;
const Mesh_Layer Mesh::OVERLAY_SURFACE;
const Mesh_Layer Mesh::OVERLAY_SURFACE_SKIRTS;
const Mesh_Layer Mesh::NUM_LAYERS;
const Mesh_Layer Mesh::Layer_MIN;
const Mesh_Layer Mesh::Layer_MAX;
const int Mesh::Layer_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mesh_LayerMask_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_LayerMask_descriptor_;
}
bool Mesh_LayerMask_IsValid(int value) {
  switch(value) {
    case 7:
    case 14:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mesh_LayerMask Mesh::TERRAIN_WITH_OVERGROUND;
const Mesh_LayerMask Mesh::TERRAIN_WITH_WATER;
const Mesh_LayerMask Mesh::TERRAIN_WITHOUT_WATER;
const Mesh_LayerMask Mesh::LayerMask_MIN;
const Mesh_LayerMask Mesh::LayerMask_MAX;
const int Mesh::LayerMask_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh::kVerticesFieldNumber;
const int Mesh::kVertexAlphasFieldNumber;
const int Mesh::kTextureCoordsFieldNumber;
const int Mesh::kIndicesFieldNumber;
const int Mesh::kOctantRangesFieldNumber;
const int Mesh::kLayerCountsFieldNumber;
const int Mesh::kTextureFieldNumber;
const int Mesh::kTextureCoordinatesFieldNumber;
const int Mesh::kUvOffsetAndScaleFieldNumber;
const int Mesh::kLayerAndOctantCountsFieldNumber;
const int Mesh::kNormalsFieldNumber;
const int Mesh::kNormalsDevFieldNumber;
const int Mesh::kMeshIdFieldNumber;
const int Mesh::kSkirtFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh::Mesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.Mesh)
}

void Mesh::InitAsDefaultInstance() {
}

Mesh::Mesh(const Mesh& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.Mesh)
}

void Mesh::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vertices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertex_alphas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_coords_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  octant_ranges_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_counts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_coordinates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_and_octant_counts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_dev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mesh_id_ = 0u;
  skirt_flags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.Mesh)
  SharedDtor();
}

void Mesh::SharedDtor() {
  vertices_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertex_alphas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_coords_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indices_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  octant_ranges_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_counts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_coordinates_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_and_octant_counts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_dev_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skirt_flags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Mesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_descriptor_;
}

const Mesh& Mesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

Mesh* Mesh::default_instance_ = NULL;

Mesh* Mesh::New(::google::protobuf::Arena* arena) const {
  Mesh* n = new Mesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.Mesh)
  if (_has_bits_[0 / 32] & 191u) {
    if (has_vertices()) {
      vertices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_vertex_alphas()) {
      vertex_alphas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_texture_coords()) {
      texture_coords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_indices()) {
      indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_octant_ranges()) {
      octant_ranges_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_layer_counts()) {
      layer_counts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_texture_coordinates()) {
      texture_coordinates_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 15872u) {
    if (has_layer_and_octant_counts()) {
      layer_and_octant_counts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_normals()) {
      normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_normals_dev()) {
      normals_dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    mesh_id_ = 0u;
    if (has_skirt_flags()) {
      skirt_flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  texture_.Clear();
  uv_offset_and_scale_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Mesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.Mesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes vertices = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_texture_coords;
        break;
      }

      // optional bytes texture_coords = 2;
      case 2: {
        if (tag == 18) {
         parse_texture_coords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_texture_coords()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_indices;
        break;
      }

      // optional bytes indices = 3;
      case 3: {
        if (tag == 26) {
         parse_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_octant_ranges;
        break;
      }

      // optional bytes octant_ranges = 4;
      case 4: {
        if (tag == 34) {
         parse_octant_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_octant_ranges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_layer_counts;
        break;
      }

      // optional bytes layer_counts = 5;
      case 5: {
        if (tag == 42) {
         parse_layer_counts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_layer_counts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_texture;
        break;
      }

      // repeated .geo_globetrotter_proto_rocktree.Texture texture = 6;
      case 6: {
        if (tag == 50) {
         parse_texture:
          DO_(input->IncrementRecursionDepth());
         parse_loop_texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_texture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_texture;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_texture_coordinates;
        break;
      }

      // optional bytes texture_coordinates = 7;
      case 7: {
        if (tag == 58) {
         parse_texture_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_texture_coordinates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_layer_and_octant_counts;
        break;
      }

      // optional bytes layer_and_octant_counts = 8;
      case 8: {
        if (tag == 66) {
         parse_layer_and_octant_counts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_layer_and_octant_counts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vertex_alphas;
        break;
      }

      // optional bytes vertex_alphas = 9;
      case 9: {
        if (tag == 74) {
         parse_vertex_alphas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vertex_alphas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_uv_offset_and_scale;
        break;
      }

      // repeated float uv_offset_and_scale = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_uv_offset_and_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_uv_offset_and_scale())));
        } else if (tag == 85) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82, input, this->mutable_uv_offset_and_scale())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_normals;
        break;
      }

      // optional bytes normals = 11;
      case 11: {
        if (tag == 90) {
         parse_normals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_normals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mesh_id;
        break;
      }

      // optional uint32 mesh_id = 12;
      case 12: {
        if (tag == 96) {
         parse_mesh_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mesh_id_)));
          set_has_mesh_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_skirt_flags;
        break;
      }

      // optional bytes skirt_flags = 13;
      case 13: {
        if (tag == 106) {
         parse_skirt_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skirt_flags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_normals_dev;
        break;
      }

      // optional bytes normals_dev = 16;
      case 16: {
        if (tag == 130) {
         parse_normals_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_normals_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.Mesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.Mesh)
  return false;
#undef DO_
}

void Mesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.Mesh)
  // optional bytes vertices = 1;
  if (has_vertices()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->vertices(), output);
  }

  // optional bytes texture_coords = 2;
  if (has_texture_coords()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->texture_coords(), output);
  }

  // optional bytes indices = 3;
  if (has_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->indices(), output);
  }

  // optional bytes octant_ranges = 4;
  if (has_octant_ranges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->octant_ranges(), output);
  }

  // optional bytes layer_counts = 5;
  if (has_layer_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->layer_counts(), output);
  }

  // repeated .geo_globetrotter_proto_rocktree.Texture texture = 6;
  for (unsigned int i = 0, n = this->texture_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->texture(i), output);
  }

  // optional bytes texture_coordinates = 7;
  if (has_texture_coordinates()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->texture_coordinates(), output);
  }

  // optional bytes layer_and_octant_counts = 8;
  if (has_layer_and_octant_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->layer_and_octant_counts(), output);
  }

  // optional bytes vertex_alphas = 9;
  if (has_vertex_alphas()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->vertex_alphas(), output);
  }

  // repeated float uv_offset_and_scale = 10 [packed = true];
  if (this->uv_offset_and_scale_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_uv_offset_and_scale_cached_byte_size_);
  }
  for (int i = 0; i < this->uv_offset_and_scale_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->uv_offset_and_scale(i), output);
  }

  // optional bytes normals = 11;
  if (has_normals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->normals(), output);
  }

  // optional uint32 mesh_id = 12;
  if (has_mesh_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mesh_id(), output);
  }

  // optional bytes skirt_flags = 13;
  if (has_skirt_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->skirt_flags(), output);
  }

  // optional bytes normals_dev = 16;
  if (has_normals_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->normals_dev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.Mesh)
}

::google::protobuf::uint8* Mesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.Mesh)
  // optional bytes vertices = 1;
  if (has_vertices()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->vertices(), target);
  }

  // optional bytes texture_coords = 2;
  if (has_texture_coords()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->texture_coords(), target);
  }

  // optional bytes indices = 3;
  if (has_indices()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->indices(), target);
  }

  // optional bytes octant_ranges = 4;
  if (has_octant_ranges()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->octant_ranges(), target);
  }

  // optional bytes layer_counts = 5;
  if (has_layer_counts()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->layer_counts(), target);
  }

  // repeated .geo_globetrotter_proto_rocktree.Texture texture = 6;
  for (unsigned int i = 0, n = this->texture_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->texture(i), false, target);
  }

  // optional bytes texture_coordinates = 7;
  if (has_texture_coordinates()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->texture_coordinates(), target);
  }

  // optional bytes layer_and_octant_counts = 8;
  if (has_layer_and_octant_counts()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->layer_and_octant_counts(), target);
  }

  // optional bytes vertex_alphas = 9;
  if (has_vertex_alphas()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->vertex_alphas(), target);
  }

  // repeated float uv_offset_and_scale = 10 [packed = true];
  if (this->uv_offset_and_scale_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _uv_offset_and_scale_cached_byte_size_, target);
  }
  for (int i = 0; i < this->uv_offset_and_scale_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->uv_offset_and_scale(i), target);
  }

  // optional bytes normals = 11;
  if (has_normals()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->normals(), target);
  }

  // optional uint32 mesh_id = 12;
  if (has_mesh_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mesh_id(), target);
  }

  // optional bytes skirt_flags = 13;
  if (has_skirt_flags()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->skirt_flags(), target);
  }

  // optional bytes normals_dev = 16;
  if (has_normals_dev()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->normals_dev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.Mesh)
  return target;
}

int Mesh::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.Mesh)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191u) {
    // optional bytes vertices = 1;
    if (has_vertices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vertices());
    }

    // optional bytes vertex_alphas = 9;
    if (has_vertex_alphas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vertex_alphas());
    }

    // optional bytes texture_coords = 2;
    if (has_texture_coords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->texture_coords());
    }

    // optional bytes indices = 3;
    if (has_indices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->indices());
    }

    // optional bytes octant_ranges = 4;
    if (has_octant_ranges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->octant_ranges());
    }

    // optional bytes layer_counts = 5;
    if (has_layer_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->layer_counts());
    }

    // optional bytes texture_coordinates = 7;
    if (has_texture_coordinates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->texture_coordinates());
    }

  }
  if (_has_bits_[9 / 32] & 15872u) {
    // optional bytes layer_and_octant_counts = 8;
    if (has_layer_and_octant_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->layer_and_octant_counts());
    }

    // optional bytes normals = 11;
    if (has_normals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->normals());
    }

    // optional bytes normals_dev = 16;
    if (has_normals_dev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->normals_dev());
    }

    // optional uint32 mesh_id = 12;
    if (has_mesh_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mesh_id());
    }

    // optional bytes skirt_flags = 13;
    if (has_skirt_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->skirt_flags());
    }

  }
  // repeated .geo_globetrotter_proto_rocktree.Texture texture = 6;
  total_size += 1 * this->texture_size();
  for (int i = 0; i < this->texture_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->texture(i));
  }

  // repeated float uv_offset_and_scale = 10 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->uv_offset_and_scale_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _uv_offset_and_scale_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.Mesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mesh* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.Mesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.Mesh)
    MergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.Mesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  texture_.MergeFrom(from.texture_);
  uv_offset_and_scale_.MergeFrom(from.uv_offset_and_scale_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vertices()) {
      set_has_vertices();
      vertices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertices_);
    }
    if (from.has_vertex_alphas()) {
      set_has_vertex_alphas();
      vertex_alphas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertex_alphas_);
    }
    if (from.has_texture_coords()) {
      set_has_texture_coords();
      texture_coords_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_coords_);
    }
    if (from.has_indices()) {
      set_has_indices();
      indices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indices_);
    }
    if (from.has_octant_ranges()) {
      set_has_octant_ranges();
      octant_ranges_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.octant_ranges_);
    }
    if (from.has_layer_counts()) {
      set_has_layer_counts();
      layer_counts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_counts_);
    }
    if (from.has_texture_coordinates()) {
      set_has_texture_coordinates();
      texture_coordinates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_coordinates_);
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_layer_and_octant_counts()) {
      set_has_layer_and_octant_counts();
      layer_and_octant_counts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_and_octant_counts_);
    }
    if (from.has_normals()) {
      set_has_normals();
      normals_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normals_);
    }
    if (from.has_normals_dev()) {
      set_has_normals_dev();
      normals_dev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normals_dev_);
    }
    if (from.has_mesh_id()) {
      set_mesh_id(from.mesh_id());
    }
    if (from.has_skirt_flags()) {
      set_has_skirt_flags();
      skirt_flags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skirt_flags_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Mesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {

  return true;
}

void Mesh::Swap(Mesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh::InternalSwap(Mesh* other) {
  vertices_.Swap(&other->vertices_);
  vertex_alphas_.Swap(&other->vertex_alphas_);
  texture_coords_.Swap(&other->texture_coords_);
  indices_.Swap(&other->indices_);
  octant_ranges_.Swap(&other->octant_ranges_);
  layer_counts_.Swap(&other->layer_counts_);
  texture_.UnsafeArenaSwap(&other->texture_);
  texture_coordinates_.Swap(&other->texture_coordinates_);
  uv_offset_and_scale_.UnsafeArenaSwap(&other->uv_offset_and_scale_);
  layer_and_octant_counts_.Swap(&other->layer_and_octant_counts_);
  normals_.Swap(&other->normals_);
  normals_dev_.Swap(&other->normals_dev_);
  std::swap(mesh_id_, other->mesh_id_);
  skirt_flags_.Swap(&other->skirt_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh_descriptor_;
  metadata.reflection = Mesh_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mesh

// optional bytes vertices = 1;
bool Mesh::has_vertices() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Mesh::set_has_vertices() {
  _has_bits_[0] |= 0x00000001u;
}
void Mesh::clear_has_vertices() {
  _has_bits_[0] &= ~0x00000001u;
}
void Mesh::clear_vertices() {
  vertices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vertices();
}
 const ::std::string& Mesh::vertices() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.vertices)
  return vertices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_vertices(const ::std::string& value) {
  set_has_vertices();
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.vertices)
}
 void Mesh::set_vertices(const char* value) {
  set_has_vertices();
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Mesh.vertices)
}
 void Mesh::set_vertices(const void* value, size_t size) {
  set_has_vertices();
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Mesh.vertices)
}
 ::std::string* Mesh::mutable_vertices() {
  set_has_vertices();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.vertices)
  return vertices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_vertices() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Mesh.vertices)
  clear_has_vertices();
  return vertices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_vertices(::std::string* vertices) {
  if (vertices != NULL) {
    set_has_vertices();
  } else {
    clear_has_vertices();
  }
  vertices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertices);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Mesh.vertices)
}

// optional bytes vertex_alphas = 9;
bool Mesh::has_vertex_alphas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Mesh::set_has_vertex_alphas() {
  _has_bits_[0] |= 0x00000002u;
}
void Mesh::clear_has_vertex_alphas() {
  _has_bits_[0] &= ~0x00000002u;
}
void Mesh::clear_vertex_alphas() {
  vertex_alphas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vertex_alphas();
}
 const ::std::string& Mesh::vertex_alphas() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.vertex_alphas)
  return vertex_alphas_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_vertex_alphas(const ::std::string& value) {
  set_has_vertex_alphas();
  vertex_alphas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.vertex_alphas)
}
 void Mesh::set_vertex_alphas(const char* value) {
  set_has_vertex_alphas();
  vertex_alphas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Mesh.vertex_alphas)
}
 void Mesh::set_vertex_alphas(const void* value, size_t size) {
  set_has_vertex_alphas();
  vertex_alphas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Mesh.vertex_alphas)
}
 ::std::string* Mesh::mutable_vertex_alphas() {
  set_has_vertex_alphas();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.vertex_alphas)
  return vertex_alphas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_vertex_alphas() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Mesh.vertex_alphas)
  clear_has_vertex_alphas();
  return vertex_alphas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_vertex_alphas(::std::string* vertex_alphas) {
  if (vertex_alphas != NULL) {
    set_has_vertex_alphas();
  } else {
    clear_has_vertex_alphas();
  }
  vertex_alphas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertex_alphas);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Mesh.vertex_alphas)
}

// optional bytes texture_coords = 2;
bool Mesh::has_texture_coords() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Mesh::set_has_texture_coords() {
  _has_bits_[0] |= 0x00000004u;
}
void Mesh::clear_has_texture_coords() {
  _has_bits_[0] &= ~0x00000004u;
}
void Mesh::clear_texture_coords() {
  texture_coords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_texture_coords();
}
 const ::std::string& Mesh::texture_coords() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.texture_coords)
  return texture_coords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_texture_coords(const ::std::string& value) {
  set_has_texture_coords();
  texture_coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.texture_coords)
}
 void Mesh::set_texture_coords(const char* value) {
  set_has_texture_coords();
  texture_coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Mesh.texture_coords)
}
 void Mesh::set_texture_coords(const void* value, size_t size) {
  set_has_texture_coords();
  texture_coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Mesh.texture_coords)
}
 ::std::string* Mesh::mutable_texture_coords() {
  set_has_texture_coords();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.texture_coords)
  return texture_coords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_texture_coords() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Mesh.texture_coords)
  clear_has_texture_coords();
  return texture_coords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_texture_coords(::std::string* texture_coords) {
  if (texture_coords != NULL) {
    set_has_texture_coords();
  } else {
    clear_has_texture_coords();
  }
  texture_coords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture_coords);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Mesh.texture_coords)
}

// optional bytes indices = 3;
bool Mesh::has_indices() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Mesh::set_has_indices() {
  _has_bits_[0] |= 0x00000008u;
}
void Mesh::clear_has_indices() {
  _has_bits_[0] &= ~0x00000008u;
}
void Mesh::clear_indices() {
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_indices();
}
 const ::std::string& Mesh::indices() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.indices)
  return indices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_indices(const ::std::string& value) {
  set_has_indices();
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.indices)
}
 void Mesh::set_indices(const char* value) {
  set_has_indices();
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Mesh.indices)
}
 void Mesh::set_indices(const void* value, size_t size) {
  set_has_indices();
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Mesh.indices)
}
 ::std::string* Mesh::mutable_indices() {
  set_has_indices();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.indices)
  return indices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_indices() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Mesh.indices)
  clear_has_indices();
  return indices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_indices(::std::string* indices) {
  if (indices != NULL) {
    set_has_indices();
  } else {
    clear_has_indices();
  }
  indices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indices);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Mesh.indices)
}

// optional bytes octant_ranges = 4;
bool Mesh::has_octant_ranges() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Mesh::set_has_octant_ranges() {
  _has_bits_[0] |= 0x00000010u;
}
void Mesh::clear_has_octant_ranges() {
  _has_bits_[0] &= ~0x00000010u;
}
void Mesh::clear_octant_ranges() {
  octant_ranges_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_octant_ranges();
}
 const ::std::string& Mesh::octant_ranges() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.octant_ranges)
  return octant_ranges_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_octant_ranges(const ::std::string& value) {
  set_has_octant_ranges();
  octant_ranges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.octant_ranges)
}
 void Mesh::set_octant_ranges(const char* value) {
  set_has_octant_ranges();
  octant_ranges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Mesh.octant_ranges)
}
 void Mesh::set_octant_ranges(const void* value, size_t size) {
  set_has_octant_ranges();
  octant_ranges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Mesh.octant_ranges)
}
 ::std::string* Mesh::mutable_octant_ranges() {
  set_has_octant_ranges();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.octant_ranges)
  return octant_ranges_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_octant_ranges() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Mesh.octant_ranges)
  clear_has_octant_ranges();
  return octant_ranges_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_octant_ranges(::std::string* octant_ranges) {
  if (octant_ranges != NULL) {
    set_has_octant_ranges();
  } else {
    clear_has_octant_ranges();
  }
  octant_ranges_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), octant_ranges);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Mesh.octant_ranges)
}

// optional bytes layer_counts = 5;
bool Mesh::has_layer_counts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Mesh::set_has_layer_counts() {
  _has_bits_[0] |= 0x00000020u;
}
void Mesh::clear_has_layer_counts() {
  _has_bits_[0] &= ~0x00000020u;
}
void Mesh::clear_layer_counts() {
  layer_counts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer_counts();
}
 const ::std::string& Mesh::layer_counts() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.layer_counts)
  return layer_counts_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_layer_counts(const ::std::string& value) {
  set_has_layer_counts();
  layer_counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.layer_counts)
}
 void Mesh::set_layer_counts(const char* value) {
  set_has_layer_counts();
  layer_counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Mesh.layer_counts)
}
 void Mesh::set_layer_counts(const void* value, size_t size) {
  set_has_layer_counts();
  layer_counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Mesh.layer_counts)
}
 ::std::string* Mesh::mutable_layer_counts() {
  set_has_layer_counts();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.layer_counts)
  return layer_counts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_layer_counts() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Mesh.layer_counts)
  clear_has_layer_counts();
  return layer_counts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_layer_counts(::std::string* layer_counts) {
  if (layer_counts != NULL) {
    set_has_layer_counts();
  } else {
    clear_has_layer_counts();
  }
  layer_counts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer_counts);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Mesh.layer_counts)
}

// repeated .geo_globetrotter_proto_rocktree.Texture texture = 6;
int Mesh::texture_size() const {
  return texture_.size();
}
void Mesh::clear_texture() {
  texture_.Clear();
}
const ::geo_globetrotter_proto_rocktree::Texture& Mesh::texture(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.texture)
  return texture_.Get(index);
}
::geo_globetrotter_proto_rocktree::Texture* Mesh::mutable_texture(int index) {
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.texture)
  return texture_.Mutable(index);
}
::geo_globetrotter_proto_rocktree::Texture* Mesh::add_texture() {
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.Mesh.texture)
  return texture_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::Texture >*
Mesh::mutable_texture() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.Mesh.texture)
  return &texture_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::Texture >&
Mesh::texture() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.Mesh.texture)
  return texture_;
}

// optional bytes texture_coordinates = 7;
bool Mesh::has_texture_coordinates() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Mesh::set_has_texture_coordinates() {
  _has_bits_[0] |= 0x00000080u;
}
void Mesh::clear_has_texture_coordinates() {
  _has_bits_[0] &= ~0x00000080u;
}
void Mesh::clear_texture_coordinates() {
  texture_coordinates_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_texture_coordinates();
}
 const ::std::string& Mesh::texture_coordinates() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.texture_coordinates)
  return texture_coordinates_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_texture_coordinates(const ::std::string& value) {
  set_has_texture_coordinates();
  texture_coordinates_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.texture_coordinates)
}
 void Mesh::set_texture_coordinates(const char* value) {
  set_has_texture_coordinates();
  texture_coordinates_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Mesh.texture_coordinates)
}
 void Mesh::set_texture_coordinates(const void* value, size_t size) {
  set_has_texture_coordinates();
  texture_coordinates_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Mesh.texture_coordinates)
}
 ::std::string* Mesh::mutable_texture_coordinates() {
  set_has_texture_coordinates();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.texture_coordinates)
  return texture_coordinates_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_texture_coordinates() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Mesh.texture_coordinates)
  clear_has_texture_coordinates();
  return texture_coordinates_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_texture_coordinates(::std::string* texture_coordinates) {
  if (texture_coordinates != NULL) {
    set_has_texture_coordinates();
  } else {
    clear_has_texture_coordinates();
  }
  texture_coordinates_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture_coordinates);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Mesh.texture_coordinates)
}

// repeated float uv_offset_and_scale = 10 [packed = true];
int Mesh::uv_offset_and_scale_size() const {
  return uv_offset_and_scale_.size();
}
void Mesh::clear_uv_offset_and_scale() {
  uv_offset_and_scale_.Clear();
}
 float Mesh::uv_offset_and_scale(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.uv_offset_and_scale)
  return uv_offset_and_scale_.Get(index);
}
 void Mesh::set_uv_offset_and_scale(int index, float value) {
  uv_offset_and_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.uv_offset_and_scale)
}
 void Mesh::add_uv_offset_and_scale(float value) {
  uv_offset_and_scale_.Add(value);
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.Mesh.uv_offset_and_scale)
}
 const ::google::protobuf::RepeatedField< float >&
Mesh::uv_offset_and_scale() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.Mesh.uv_offset_and_scale)
  return uv_offset_and_scale_;
}
 ::google::protobuf::RepeatedField< float >*
Mesh::mutable_uv_offset_and_scale() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.Mesh.uv_offset_and_scale)
  return &uv_offset_and_scale_;
}

// optional bytes layer_and_octant_counts = 8;
bool Mesh::has_layer_and_octant_counts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Mesh::set_has_layer_and_octant_counts() {
  _has_bits_[0] |= 0x00000200u;
}
void Mesh::clear_has_layer_and_octant_counts() {
  _has_bits_[0] &= ~0x00000200u;
}
void Mesh::clear_layer_and_octant_counts() {
  layer_and_octant_counts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer_and_octant_counts();
}
 const ::std::string& Mesh::layer_and_octant_counts() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.layer_and_octant_counts)
  return layer_and_octant_counts_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_layer_and_octant_counts(const ::std::string& value) {
  set_has_layer_and_octant_counts();
  layer_and_octant_counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.layer_and_octant_counts)
}
 void Mesh::set_layer_and_octant_counts(const char* value) {
  set_has_layer_and_octant_counts();
  layer_and_octant_counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Mesh.layer_and_octant_counts)
}
 void Mesh::set_layer_and_octant_counts(const void* value, size_t size) {
  set_has_layer_and_octant_counts();
  layer_and_octant_counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Mesh.layer_and_octant_counts)
}
 ::std::string* Mesh::mutable_layer_and_octant_counts() {
  set_has_layer_and_octant_counts();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.layer_and_octant_counts)
  return layer_and_octant_counts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_layer_and_octant_counts() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Mesh.layer_and_octant_counts)
  clear_has_layer_and_octant_counts();
  return layer_and_octant_counts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_layer_and_octant_counts(::std::string* layer_and_octant_counts) {
  if (layer_and_octant_counts != NULL) {
    set_has_layer_and_octant_counts();
  } else {
    clear_has_layer_and_octant_counts();
  }
  layer_and_octant_counts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer_and_octant_counts);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Mesh.layer_and_octant_counts)
}

// optional bytes normals = 11;
bool Mesh::has_normals() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Mesh::set_has_normals() {
  _has_bits_[0] |= 0x00000400u;
}
void Mesh::clear_has_normals() {
  _has_bits_[0] &= ~0x00000400u;
}
void Mesh::clear_normals() {
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_normals();
}
 const ::std::string& Mesh::normals() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.normals)
  return normals_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_normals(const ::std::string& value) {
  set_has_normals();
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.normals)
}
 void Mesh::set_normals(const char* value) {
  set_has_normals();
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Mesh.normals)
}
 void Mesh::set_normals(const void* value, size_t size) {
  set_has_normals();
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Mesh.normals)
}
 ::std::string* Mesh::mutable_normals() {
  set_has_normals();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.normals)
  return normals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_normals() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Mesh.normals)
  clear_has_normals();
  return normals_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_normals(::std::string* normals) {
  if (normals != NULL) {
    set_has_normals();
  } else {
    clear_has_normals();
  }
  normals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normals);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Mesh.normals)
}

// optional bytes normals_dev = 16;
bool Mesh::has_normals_dev() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Mesh::set_has_normals_dev() {
  _has_bits_[0] |= 0x00000800u;
}
void Mesh::clear_has_normals_dev() {
  _has_bits_[0] &= ~0x00000800u;
}
void Mesh::clear_normals_dev() {
  normals_dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_normals_dev();
}
 const ::std::string& Mesh::normals_dev() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.normals_dev)
  return normals_dev_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_normals_dev(const ::std::string& value) {
  set_has_normals_dev();
  normals_dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.normals_dev)
}
 void Mesh::set_normals_dev(const char* value) {
  set_has_normals_dev();
  normals_dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Mesh.normals_dev)
}
 void Mesh::set_normals_dev(const void* value, size_t size) {
  set_has_normals_dev();
  normals_dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Mesh.normals_dev)
}
 ::std::string* Mesh::mutable_normals_dev() {
  set_has_normals_dev();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.normals_dev)
  return normals_dev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_normals_dev() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Mesh.normals_dev)
  clear_has_normals_dev();
  return normals_dev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_normals_dev(::std::string* normals_dev) {
  if (normals_dev != NULL) {
    set_has_normals_dev();
  } else {
    clear_has_normals_dev();
  }
  normals_dev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normals_dev);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Mesh.normals_dev)
}

// optional uint32 mesh_id = 12;
bool Mesh::has_mesh_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Mesh::set_has_mesh_id() {
  _has_bits_[0] |= 0x00001000u;
}
void Mesh::clear_has_mesh_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void Mesh::clear_mesh_id() {
  mesh_id_ = 0u;
  clear_has_mesh_id();
}
 ::google::protobuf::uint32 Mesh::mesh_id() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.mesh_id)
  return mesh_id_;
}
 void Mesh::set_mesh_id(::google::protobuf::uint32 value) {
  set_has_mesh_id();
  mesh_id_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.mesh_id)
}

// optional bytes skirt_flags = 13;
bool Mesh::has_skirt_flags() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Mesh::set_has_skirt_flags() {
  _has_bits_[0] |= 0x00002000u;
}
void Mesh::clear_has_skirt_flags() {
  _has_bits_[0] &= ~0x00002000u;
}
void Mesh::clear_skirt_flags() {
  skirt_flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_skirt_flags();
}
 const ::std::string& Mesh::skirt_flags() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Mesh.skirt_flags)
  return skirt_flags_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_skirt_flags(const ::std::string& value) {
  set_has_skirt_flags();
  skirt_flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Mesh.skirt_flags)
}
 void Mesh::set_skirt_flags(const char* value) {
  set_has_skirt_flags();
  skirt_flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Mesh.skirt_flags)
}
 void Mesh::set_skirt_flags(const void* value, size_t size) {
  set_has_skirt_flags();
  skirt_flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Mesh.skirt_flags)
}
 ::std::string* Mesh::mutable_skirt_flags() {
  set_has_skirt_flags();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Mesh.skirt_flags)
  return skirt_flags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_skirt_flags() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Mesh.skirt_flags)
  clear_has_skirt_flags();
  return skirt_flags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_skirt_flags(::std::string* skirt_flags) {
  if (skirt_flags != NULL) {
    set_has_skirt_flags();
  } else {
    clear_has_skirt_flags();
  }
  skirt_flags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skirt_flags);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Mesh.skirt_flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Texture_Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Texture_Format_descriptor_;
}
bool Texture_Format_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Texture_Format Texture::JPG;
const Texture_Format Texture::DXT1;
const Texture_Format Texture::ETC1;
const Texture_Format Texture::PVRTC2;
const Texture_Format Texture::PVRTC4;
const Texture_Format Texture::CRN_DXT1;
const Texture_Format Texture::Format_MIN;
const Texture_Format Texture::Format_MAX;
const int Texture::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Texture_ViewDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Texture_ViewDirection_descriptor_;
}
bool Texture_ViewDirection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Texture_ViewDirection Texture::NADIR;
const Texture_ViewDirection Texture::NORTH_45;
const Texture_ViewDirection Texture::EAST_45;
const Texture_ViewDirection Texture::SOUTH_45;
const Texture_ViewDirection Texture::WEST_45;
const Texture_ViewDirection Texture::ViewDirection_MIN;
const Texture_ViewDirection Texture::ViewDirection_MAX;
const int Texture::ViewDirection_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Texture::kDataFieldNumber;
const int Texture::kFormatFieldNumber;
const int Texture::kWidthFieldNumber;
const int Texture::kHeightFieldNumber;
const int Texture::kViewDirectionFieldNumber;
const int Texture::kMeshIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Texture::Texture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.Texture)
}

void Texture::InitAsDefaultInstance() {
}

Texture::Texture(const Texture& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.Texture)
}

void Texture::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  format_ = 1;
  width_ = 256u;
  height_ = 256u;
  view_direction_ = 0;
  mesh_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Texture::~Texture() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.Texture)
  SharedDtor();
}

void Texture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Texture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Texture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Texture_descriptor_;
}

const Texture& Texture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

Texture* Texture::default_instance_ = NULL;

Texture* Texture::New(::google::protobuf::Arena* arena) const {
  Texture* n = new Texture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Texture::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.Texture)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Texture, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Texture*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 62u) {
    ZR_(view_direction_, mesh_id_);
    format_ = 1;
    width_ = 256u;
    height_ = 256u;
  }

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Texture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.Texture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_format;
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Texture.Format format = 2;
      case 2: {
        if (tag == 16) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(value)) {
            set_format(static_cast< ::geo_globetrotter_proto_rocktree::Texture_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional uint32 width = 3 [default = 256];
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional uint32 height = 4 [default = 256];
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_view_direction;
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 5;
      case 5: {
        if (tag == 40) {
         parse_view_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_globetrotter_proto_rocktree::Texture_ViewDirection_IsValid(value)) {
            set_view_direction(static_cast< ::geo_globetrotter_proto_rocktree::Texture_ViewDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mesh_id;
        break;
      }

      // optional uint32 mesh_id = 6;
      case 6: {
        if (tag == 48) {
         parse_mesh_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mesh_id_)));
          set_has_mesh_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.Texture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.Texture)
  return false;
#undef DO_
}

void Texture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.Texture)
  // repeated bytes data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(i), output);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.Format format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->format(), output);
  }

  // optional uint32 width = 3 [default = 256];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 height = 4 [default = 256];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 5;
  if (has_view_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->view_direction(), output);
  }

  // optional uint32 mesh_id = 6;
  if (has_mesh_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mesh_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.Texture)
}

::google::protobuf::uint8* Texture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.Texture)
  // repeated bytes data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->data(i), target);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.Format format = 2;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->format(), target);
  }

  // optional uint32 width = 3 [default = 256];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 height = 4 [default = 256];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 5;
  if (has_view_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->view_direction(), target);
  }

  // optional uint32 mesh_id = 6;
  if (has_mesh_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mesh_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.Texture)
  return target;
}

int Texture::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.Texture)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 62u) {
    // optional .geo_globetrotter_proto_rocktree.Texture.Format format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional uint32 width = 3 [default = 256];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 4 [default = 256];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 5;
    if (has_view_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->view_direction());
    }

    // optional uint32 mesh_id = 6;
    if (has_mesh_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mesh_id());
    }

  }
  // repeated bytes data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Texture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.Texture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Texture* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Texture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.Texture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.Texture)
    MergeFrom(*source);
  }
}

void Texture::MergeFrom(const Texture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.Texture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_view_direction()) {
      set_view_direction(from.view_direction());
    }
    if (from.has_mesh_id()) {
      set_mesh_id(from.mesh_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Texture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Texture::CopyFrom(const Texture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Texture::IsInitialized() const {

  return true;
}

void Texture::Swap(Texture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Texture::InternalSwap(Texture* other) {
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(format_, other->format_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(view_direction_, other->view_direction_);
  std::swap(mesh_id_, other->mesh_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Texture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Texture_descriptor_;
  metadata.reflection = Texture_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Texture

// repeated bytes data = 1;
int Texture::data_size() const {
  return data_.size();
}
void Texture::clear_data() {
  data_.Clear();
}
 const ::std::string& Texture::data(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Texture.data)
  return data_.Get(index);
}
 ::std::string* Texture::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Texture.data)
  return data_.Mutable(index);
}
 void Texture::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Texture.data)
  data_.Mutable(index)->assign(value);
}
 void Texture::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Texture.data)
}
 void Texture::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Texture.data)
}
 ::std::string* Texture::add_data() {
  // @@protoc_insertion_point(field_add_mutable:geo_globetrotter_proto_rocktree.Texture.data)
  return data_.Add();
}
 void Texture::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.Texture.data)
}
 void Texture::add_data(const char* value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:geo_globetrotter_proto_rocktree.Texture.data)
}
 void Texture::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:geo_globetrotter_proto_rocktree.Texture.data)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Texture::data() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.Texture.data)
  return data_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Texture::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.Texture.data)
  return &data_;
}

// optional .geo_globetrotter_proto_rocktree.Texture.Format format = 2;
bool Texture::has_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Texture::set_has_format() {
  _has_bits_[0] |= 0x00000002u;
}
void Texture::clear_has_format() {
  _has_bits_[0] &= ~0x00000002u;
}
void Texture::clear_format() {
  format_ = 1;
  clear_has_format();
}
 ::geo_globetrotter_proto_rocktree::Texture_Format Texture::format() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Texture.format)
  return static_cast< ::geo_globetrotter_proto_rocktree::Texture_Format >(format_);
}
 void Texture::set_format(::geo_globetrotter_proto_rocktree::Texture_Format value) {
  assert(::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Texture.format)
}

// optional uint32 width = 3 [default = 256];
bool Texture::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Texture::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void Texture::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void Texture::clear_width() {
  width_ = 256u;
  clear_has_width();
}
 ::google::protobuf::uint32 Texture::width() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Texture.width)
  return width_;
}
 void Texture::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Texture.width)
}

// optional uint32 height = 4 [default = 256];
bool Texture::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Texture::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void Texture::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void Texture::clear_height() {
  height_ = 256u;
  clear_has_height();
}
 ::google::protobuf::uint32 Texture::height() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Texture.height)
  return height_;
}
 void Texture::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Texture.height)
}

// optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 5;
bool Texture::has_view_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Texture::set_has_view_direction() {
  _has_bits_[0] |= 0x00000010u;
}
void Texture::clear_has_view_direction() {
  _has_bits_[0] &= ~0x00000010u;
}
void Texture::clear_view_direction() {
  view_direction_ = 0;
  clear_has_view_direction();
}
 ::geo_globetrotter_proto_rocktree::Texture_ViewDirection Texture::view_direction() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Texture.view_direction)
  return static_cast< ::geo_globetrotter_proto_rocktree::Texture_ViewDirection >(view_direction_);
}
 void Texture::set_view_direction(::geo_globetrotter_proto_rocktree::Texture_ViewDirection value) {
  assert(::geo_globetrotter_proto_rocktree::Texture_ViewDirection_IsValid(value));
  set_has_view_direction();
  view_direction_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Texture.view_direction)
}

// optional uint32 mesh_id = 6;
bool Texture::has_mesh_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Texture::set_has_mesh_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Texture::clear_has_mesh_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Texture::clear_mesh_id() {
  mesh_id_ = 0u;
  clear_has_mesh_id();
}
 ::google::protobuf::uint32 Texture::mesh_id() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Texture.mesh_id)
  return mesh_id_;
}
 void Texture::set_mesh_id(::google::protobuf::uint32 value) {
  set_has_mesh_id();
  mesh_id_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Texture.mesh_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextureData::kNodeKeyFieldNumber;
const int TextureData::kTexturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextureData::TextureData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.TextureData)
}

void TextureData::InitAsDefaultInstance() {
  node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(&::geo_globetrotter_proto_rocktree::NodeKey::default_instance());
}

TextureData::TextureData(const TextureData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.TextureData)
}

void TextureData::SharedCtor() {
  _cached_size_ = 0;
  node_key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextureData::~TextureData() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.TextureData)
  SharedDtor();
}

void TextureData::SharedDtor() {
  if (this != default_instance_) {
    delete node_key_;
  }
}

void TextureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextureData_descriptor_;
}

const TextureData& TextureData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

TextureData* TextureData::default_instance_ = NULL;

TextureData* TextureData::New(::google::protobuf::Arena* arena) const {
  TextureData* n = new TextureData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextureData::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.TextureData)
  if (has_node_key()) {
    if (node_key_ != NULL) node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
  }
  textures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TextureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.TextureData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_textures;
        break;
      }

      // repeated .geo_globetrotter_proto_rocktree.Texture textures = 2;
      case 2: {
        if (tag == 18) {
         parse_textures:
          DO_(input->IncrementRecursionDepth());
         parse_loop_textures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_textures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_textures;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.TextureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.TextureData)
  return false;
#undef DO_
}

void TextureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.TextureData)
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (has_node_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_key_, output);
  }

  // repeated .geo_globetrotter_proto_rocktree.Texture textures = 2;
  for (unsigned int i = 0, n = this->textures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->textures(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.TextureData)
}

::google::protobuf::uint8* TextureData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.TextureData)
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (has_node_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_key_, false, target);
  }

  // repeated .geo_globetrotter_proto_rocktree.Texture textures = 2;
  for (unsigned int i = 0, n = this->textures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->textures(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.TextureData)
  return target;
}

int TextureData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.TextureData)
  int total_size = 0;

  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (has_node_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_key_);
  }

  // repeated .geo_globetrotter_proto_rocktree.Texture textures = 2;
  total_size += 1 * this->textures_size();
  for (int i = 0; i < this->textures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->textures(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextureData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.TextureData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TextureData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TextureData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.TextureData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.TextureData)
    MergeFrom(*source);
  }
}

void TextureData::MergeFrom(const TextureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.TextureData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  textures_.MergeFrom(from.textures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_key()) {
      mutable_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.node_key());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TextureData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.TextureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextureData::CopyFrom(const TextureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.TextureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureData::IsInitialized() const {

  return true;
}

void TextureData::Swap(TextureData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextureData::InternalSwap(TextureData* other) {
  std::swap(node_key_, other->node_key_);
  textures_.UnsafeArenaSwap(&other->textures_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextureData_descriptor_;
  metadata.reflection = TextureData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextureData

// optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
bool TextureData::has_node_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TextureData::set_has_node_key() {
  _has_bits_[0] |= 0x00000001u;
}
void TextureData::clear_has_node_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void TextureData::clear_node_key() {
  if (node_key_ != NULL) node_key_->::geo_globetrotter_proto_rocktree::NodeKey::Clear();
  clear_has_node_key();
}
const ::geo_globetrotter_proto_rocktree::NodeKey& TextureData::node_key() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.TextureData.node_key)
  return node_key_ != NULL ? *node_key_ : *default_instance_->node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* TextureData::mutable_node_key() {
  set_has_node_key();
  if (node_key_ == NULL) {
    node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey;
  }
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.TextureData.node_key)
  return node_key_;
}
::geo_globetrotter_proto_rocktree::NodeKey* TextureData::release_node_key() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.TextureData.node_key)
  clear_has_node_key();
  ::geo_globetrotter_proto_rocktree::NodeKey* temp = node_key_;
  node_key_ = NULL;
  return temp;
}
void TextureData::set_allocated_node_key(::geo_globetrotter_proto_rocktree::NodeKey* node_key) {
  delete node_key_;
  node_key_ = node_key;
  if (node_key) {
    set_has_node_key();
  } else {
    clear_has_node_key();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.TextureData.node_key)
}

// repeated .geo_globetrotter_proto_rocktree.Texture textures = 2;
int TextureData::textures_size() const {
  return textures_.size();
}
void TextureData::clear_textures() {
  textures_.Clear();
}
const ::geo_globetrotter_proto_rocktree::Texture& TextureData::textures(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.TextureData.textures)
  return textures_.Get(index);
}
::geo_globetrotter_proto_rocktree::Texture* TextureData::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.TextureData.textures)
  return textures_.Mutable(index);
}
::geo_globetrotter_proto_rocktree::Texture* TextureData::add_textures() {
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.TextureData.textures)
  return textures_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::Texture >*
TextureData::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.TextureData.textures)
  return &textures_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::Texture >&
TextureData::textures() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.TextureData.textures)
  return textures_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Copyrights::kCopyrightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Copyrights::Copyrights()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.Copyrights)
}

void Copyrights::InitAsDefaultInstance() {
}

Copyrights::Copyrights(const Copyrights& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.Copyrights)
}

void Copyrights::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Copyrights::~Copyrights() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.Copyrights)
  SharedDtor();
}

void Copyrights::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Copyrights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Copyrights::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Copyrights_descriptor_;
}

const Copyrights& Copyrights::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

Copyrights* Copyrights::default_instance_ = NULL;

Copyrights* Copyrights::New(::google::protobuf::Arena* arena) const {
  Copyrights* n = new Copyrights;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Copyrights::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.Copyrights)
  copyrights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Copyrights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.Copyrights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .geo_globetrotter_proto_rocktree.Copyright copyrights = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_copyrights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_copyrights()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_copyrights;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.Copyrights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.Copyrights)
  return false;
#undef DO_
}

void Copyrights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.Copyrights)
  // repeated .geo_globetrotter_proto_rocktree.Copyright copyrights = 1;
  for (unsigned int i = 0, n = this->copyrights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->copyrights(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.Copyrights)
}

::google::protobuf::uint8* Copyrights::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.Copyrights)
  // repeated .geo_globetrotter_proto_rocktree.Copyright copyrights = 1;
  for (unsigned int i = 0, n = this->copyrights_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->copyrights(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.Copyrights)
  return target;
}

int Copyrights::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.Copyrights)
  int total_size = 0;

  // repeated .geo_globetrotter_proto_rocktree.Copyright copyrights = 1;
  total_size += 1 * this->copyrights_size();
  for (int i = 0; i < this->copyrights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->copyrights(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Copyrights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.Copyrights)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Copyrights* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Copyrights>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.Copyrights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.Copyrights)
    MergeFrom(*source);
  }
}

void Copyrights::MergeFrom(const Copyrights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.Copyrights)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  copyrights_.MergeFrom(from.copyrights_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Copyrights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.Copyrights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Copyrights::CopyFrom(const Copyrights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.Copyrights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Copyrights::IsInitialized() const {

  return true;
}

void Copyrights::Swap(Copyrights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Copyrights::InternalSwap(Copyrights* other) {
  copyrights_.UnsafeArenaSwap(&other->copyrights_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Copyrights::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Copyrights_descriptor_;
  metadata.reflection = Copyrights_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Copyrights

// repeated .geo_globetrotter_proto_rocktree.Copyright copyrights = 1;
int Copyrights::copyrights_size() const {
  return copyrights_.size();
}
void Copyrights::clear_copyrights() {
  copyrights_.Clear();
}
const ::geo_globetrotter_proto_rocktree::Copyright& Copyrights::copyrights(int index) const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Copyrights.copyrights)
  return copyrights_.Get(index);
}
::geo_globetrotter_proto_rocktree::Copyright* Copyrights::mutable_copyrights(int index) {
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Copyrights.copyrights)
  return copyrights_.Mutable(index);
}
::geo_globetrotter_proto_rocktree::Copyright* Copyrights::add_copyrights() {
  // @@protoc_insertion_point(field_add:geo_globetrotter_proto_rocktree.Copyrights.copyrights)
  return copyrights_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::Copyright >*
Copyrights::mutable_copyrights() {
  // @@protoc_insertion_point(field_mutable_list:geo_globetrotter_proto_rocktree.Copyrights.copyrights)
  return &copyrights_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_globetrotter_proto_rocktree::Copyright >&
Copyrights::copyrights() const {
  // @@protoc_insertion_point(field_list:geo_globetrotter_proto_rocktree.Copyrights.copyrights)
  return copyrights_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Copyright::kIdFieldNumber;
const int Copyright::kTextFieldNumber;
const int Copyright::kTextCleanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Copyright::Copyright()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.Copyright)
}

void Copyright::InitAsDefaultInstance() {
}

Copyright::Copyright(const Copyright& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.Copyright)
}

void Copyright::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_clean_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Copyright::~Copyright() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.Copyright)
  SharedDtor();
}

void Copyright::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_clean_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Copyright::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Copyright::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Copyright_descriptor_;
}

const Copyright& Copyright::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

Copyright* Copyright::default_instance_ = NULL;

Copyright* Copyright::New(::google::protobuf::Arena* arena) const {
  Copyright* n = new Copyright;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Copyright::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.Copyright)
  if (_has_bits_[0 / 32] & 7u) {
    id_ = 0u;
    if (has_text()) {
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_text_clean()) {
      text_clean_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Copyright::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.Copyright)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geo_globetrotter_proto_rocktree.Copyright.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text_clean;
        break;
      }

      // optional string text_clean = 3;
      case 3: {
        if (tag == 26) {
         parse_text_clean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_clean()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_clean().data(), this->text_clean().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geo_globetrotter_proto_rocktree.Copyright.text_clean");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.Copyright)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.Copyright)
  return false;
#undef DO_
}

void Copyright::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.Copyright)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.Copyright.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional string text_clean = 3;
  if (has_text_clean()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_clean().data(), this->text_clean().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.Copyright.text_clean");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text_clean(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.Copyright)
}

::google::protobuf::uint8* Copyright::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.Copyright)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.Copyright.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional string text_clean = 3;
  if (has_text_clean()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_clean().data(), this->text_clean().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.Copyright.text_clean");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text_clean(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.Copyright)
  return target;
}

int Copyright::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.Copyright)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string text_clean = 3;
    if (has_text_clean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_clean());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Copyright::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.Copyright)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Copyright* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Copyright>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.Copyright)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.Copyright)
    MergeFrom(*source);
  }
}

void Copyright::MergeFrom(const Copyright& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.Copyright)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (from.has_text_clean()) {
      set_has_text_clean();
      text_clean_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_clean_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Copyright::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.Copyright)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Copyright::CopyFrom(const Copyright& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.Copyright)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Copyright::IsInitialized() const {

  return true;
}

void Copyright::Swap(Copyright* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Copyright::InternalSwap(Copyright* other) {
  std::swap(id_, other->id_);
  text_.Swap(&other->text_);
  text_clean_.Swap(&other->text_clean_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Copyright::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Copyright_descriptor_;
  metadata.reflection = Copyright_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Copyright

// optional uint32 id = 1;
bool Copyright::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Copyright::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Copyright::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Copyright::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 Copyright::id() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Copyright.id)
  return id_;
}
 void Copyright::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Copyright.id)
}

// optional string text = 2;
bool Copyright::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Copyright::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void Copyright::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void Copyright::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& Copyright::text() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Copyright.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Copyright::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Copyright.text)
}
 void Copyright::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Copyright.text)
}
 void Copyright::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Copyright.text)
}
 ::std::string* Copyright::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Copyright.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Copyright::release_text() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Copyright.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Copyright::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Copyright.text)
}

// optional string text_clean = 3;
bool Copyright::has_text_clean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Copyright::set_has_text_clean() {
  _has_bits_[0] |= 0x00000004u;
}
void Copyright::clear_has_text_clean() {
  _has_bits_[0] &= ~0x00000004u;
}
void Copyright::clear_text_clean() {
  text_clean_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_clean();
}
 const ::std::string& Copyright::text_clean() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.Copyright.text_clean)
  return text_clean_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Copyright::set_text_clean(const ::std::string& value) {
  set_has_text_clean();
  text_clean_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.Copyright.text_clean)
}
 void Copyright::set_text_clean(const char* value) {
  set_has_text_clean();
  text_clean_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geo_globetrotter_proto_rocktree.Copyright.text_clean)
}
 void Copyright::set_text_clean(const char* value, size_t size) {
  set_has_text_clean();
  text_clean_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geo_globetrotter_proto_rocktree.Copyright.text_clean)
}
 ::std::string* Copyright::mutable_text_clean() {
  set_has_text_clean();
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.Copyright.text_clean)
  return text_clean_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Copyright::release_text_clean() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.Copyright.text_clean)
  clear_has_text_clean();
  return text_clean_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Copyright::set_allocated_text_clean(::std::string* text_clean) {
  if (text_clean != NULL) {
    set_has_text_clean();
  } else {
    clear_has_text_clean();
  }
  text_clean_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_clean);
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.Copyright.text_clean)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanetoidMetadata::kRootNodeMetadataFieldNumber;
const int PlanetoidMetadata::kRadiusFieldNumber;
const int PlanetoidMetadata::kMinTerrainAltitudeFieldNumber;
const int PlanetoidMetadata::kMaxTerrainAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanetoidMetadata::PlanetoidMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
}

void PlanetoidMetadata::InitAsDefaultInstance() {
  root_node_metadata_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeMetadata*>(&::geo_globetrotter_proto_rocktree::NodeMetadata::default_instance());
}

PlanetoidMetadata::PlanetoidMetadata(const PlanetoidMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
}

void PlanetoidMetadata::SharedCtor() {
  _cached_size_ = 0;
  root_node_metadata_ = NULL;
  radius_ = 0;
  min_terrain_altitude_ = 0;
  max_terrain_altitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetoidMetadata::~PlanetoidMetadata() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  SharedDtor();
}

void PlanetoidMetadata::SharedDtor() {
  if (this != default_instance_) {
    delete root_node_metadata_;
  }
}

void PlanetoidMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetoidMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetoidMetadata_descriptor_;
}

const PlanetoidMetadata& PlanetoidMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rocktree_2eproto();
  return *default_instance_;
}

PlanetoidMetadata* PlanetoidMetadata::default_instance_ = NULL;

PlanetoidMetadata* PlanetoidMetadata::New(::google::protobuf::Arena* arena) const {
  PlanetoidMetadata* n = new PlanetoidMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanetoidMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlanetoidMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlanetoidMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(radius_, max_terrain_altitude_);
    if (has_root_node_metadata()) {
      if (root_node_metadata_ != NULL) root_node_metadata_->::geo_globetrotter_proto_rocktree::NodeMetadata::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlanetoidMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geo_globetrotter_proto_rocktree.NodeMetadata root_node_metadata = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_node_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_radius;
        break;
      }

      // optional float radius = 2;
      case 2: {
        if (tag == 21) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_min_terrain_altitude;
        break;
      }

      // optional float min_terrain_altitude = 3;
      case 3: {
        if (tag == 29) {
         parse_min_terrain_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_terrain_altitude_)));
          set_has_min_terrain_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max_terrain_altitude;
        break;
      }

      // optional float max_terrain_altitude = 4;
      case 4: {
        if (tag == 37) {
         parse_max_terrain_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_terrain_altitude_)));
          set_has_max_terrain_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  return false;
#undef DO_
}

void PlanetoidMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  // optional .geo_globetrotter_proto_rocktree.NodeMetadata root_node_metadata = 1;
  if (has_root_node_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->root_node_metadata_, output);
  }

  // optional float radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  // optional float min_terrain_altitude = 3;
  if (has_min_terrain_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_terrain_altitude(), output);
  }

  // optional float max_terrain_altitude = 4;
  if (has_max_terrain_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_terrain_altitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
}

::google::protobuf::uint8* PlanetoidMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  // optional .geo_globetrotter_proto_rocktree.NodeMetadata root_node_metadata = 1;
  if (has_root_node_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->root_node_metadata_, false, target);
  }

  // optional float radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  // optional float min_terrain_altitude = 3;
  if (has_min_terrain_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min_terrain_altitude(), target);
  }

  // optional float max_terrain_altitude = 4;
  if (has_max_terrain_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_terrain_altitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  return target;
}

int PlanetoidMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .geo_globetrotter_proto_rocktree.NodeMetadata root_node_metadata = 1;
    if (has_root_node_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->root_node_metadata_);
    }

    // optional float radius = 2;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional float min_terrain_altitude = 3;
    if (has_min_terrain_altitude()) {
      total_size += 1 + 4;
    }

    // optional float max_terrain_altitude = 4;
    if (has_max_terrain_altitude()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetoidMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlanetoidMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanetoidMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
    MergeFrom(*source);
  }
}

void PlanetoidMetadata::MergeFrom(const PlanetoidMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_root_node_metadata()) {
      mutable_root_node_metadata()->::geo_globetrotter_proto_rocktree::NodeMetadata::MergeFrom(from.root_node_metadata());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_min_terrain_altitude()) {
      set_min_terrain_altitude(from.min_terrain_altitude());
    }
    if (from.has_max_terrain_altitude()) {
      set_max_terrain_altitude(from.max_terrain_altitude());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlanetoidMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetoidMetadata::CopyFrom(const PlanetoidMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetoidMetadata::IsInitialized() const {

  return true;
}

void PlanetoidMetadata::Swap(PlanetoidMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanetoidMetadata::InternalSwap(PlanetoidMetadata* other) {
  std::swap(root_node_metadata_, other->root_node_metadata_);
  std::swap(radius_, other->radius_);
  std::swap(min_terrain_altitude_, other->min_terrain_altitude_);
  std::swap(max_terrain_altitude_, other->max_terrain_altitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanetoidMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetoidMetadata_descriptor_;
  metadata.reflection = PlanetoidMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanetoidMetadata

// optional .geo_globetrotter_proto_rocktree.NodeMetadata root_node_metadata = 1;
bool PlanetoidMetadata::has_root_node_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanetoidMetadata::set_has_root_node_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanetoidMetadata::clear_has_root_node_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanetoidMetadata::clear_root_node_metadata() {
  if (root_node_metadata_ != NULL) root_node_metadata_->::geo_globetrotter_proto_rocktree::NodeMetadata::Clear();
  clear_has_root_node_metadata();
}
const ::geo_globetrotter_proto_rocktree::NodeMetadata& PlanetoidMetadata::root_node_metadata() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.PlanetoidMetadata.root_node_metadata)
  return root_node_metadata_ != NULL ? *root_node_metadata_ : *default_instance_->root_node_metadata_;
}
::geo_globetrotter_proto_rocktree::NodeMetadata* PlanetoidMetadata::mutable_root_node_metadata() {
  set_has_root_node_metadata();
  if (root_node_metadata_ == NULL) {
    root_node_metadata_ = new ::geo_globetrotter_proto_rocktree::NodeMetadata;
  }
  // @@protoc_insertion_point(field_mutable:geo_globetrotter_proto_rocktree.PlanetoidMetadata.root_node_metadata)
  return root_node_metadata_;
}
::geo_globetrotter_proto_rocktree::NodeMetadata* PlanetoidMetadata::release_root_node_metadata() {
  // @@protoc_insertion_point(field_release:geo_globetrotter_proto_rocktree.PlanetoidMetadata.root_node_metadata)
  clear_has_root_node_metadata();
  ::geo_globetrotter_proto_rocktree::NodeMetadata* temp = root_node_metadata_;
  root_node_metadata_ = NULL;
  return temp;
}
void PlanetoidMetadata::set_allocated_root_node_metadata(::geo_globetrotter_proto_rocktree::NodeMetadata* root_node_metadata) {
  delete root_node_metadata_;
  root_node_metadata_ = root_node_metadata;
  if (root_node_metadata) {
    set_has_root_node_metadata();
  } else {
    clear_has_root_node_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_globetrotter_proto_rocktree.PlanetoidMetadata.root_node_metadata)
}

// optional float radius = 2;
bool PlanetoidMetadata::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanetoidMetadata::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanetoidMetadata::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanetoidMetadata::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 float PlanetoidMetadata::radius() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.PlanetoidMetadata.radius)
  return radius_;
}
 void PlanetoidMetadata::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.PlanetoidMetadata.radius)
}

// optional float min_terrain_altitude = 3;
bool PlanetoidMetadata::has_min_terrain_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlanetoidMetadata::set_has_min_terrain_altitude() {
  _has_bits_[0] |= 0x00000004u;
}
void PlanetoidMetadata::clear_has_min_terrain_altitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlanetoidMetadata::clear_min_terrain_altitude() {
  min_terrain_altitude_ = 0;
  clear_has_min_terrain_altitude();
}
 float PlanetoidMetadata::min_terrain_altitude() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.PlanetoidMetadata.min_terrain_altitude)
  return min_terrain_altitude_;
}
 void PlanetoidMetadata::set_min_terrain_altitude(float value) {
  set_has_min_terrain_altitude();
  min_terrain_altitude_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.PlanetoidMetadata.min_terrain_altitude)
}

// optional float max_terrain_altitude = 4;
bool PlanetoidMetadata::has_max_terrain_altitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlanetoidMetadata::set_has_max_terrain_altitude() {
  _has_bits_[0] |= 0x00000008u;
}
void PlanetoidMetadata::clear_has_max_terrain_altitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlanetoidMetadata::clear_max_terrain_altitude() {
  max_terrain_altitude_ = 0;
  clear_has_max_terrain_altitude();
}
 float PlanetoidMetadata::max_terrain_altitude() const {
  // @@protoc_insertion_point(field_get:geo_globetrotter_proto_rocktree.PlanetoidMetadata.max_terrain_altitude)
  return max_terrain_altitude_;
}
 void PlanetoidMetadata::set_max_terrain_altitude(float value) {
  set_has_max_terrain_altitude();
  max_terrain_altitude_ = value;
  // @@protoc_insertion_point(field_set:geo_globetrotter_proto_rocktree.PlanetoidMetadata.max_terrain_altitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace geo_globetrotter_proto_rocktree

// @@protoc_insertion_point(global_scope)
